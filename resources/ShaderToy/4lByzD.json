{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "4lByzD",
      "date": "1507591270",
      "viewed": 351,
      "name": "Simplex SageMath.toBary/det",
      "username": "ollj",
      "description": "lets see if i can crunch of\nhttps://www.shadertoy.com/view/4tSyzD\nyes i can, and then paniq did a better crunch later on, and then i made a post  where this backup is relevant for\nhttp://ollj.turboherz.de/opengl-cancer\ncrunch time!",
      "likes": 2,
      "published": 3,
      "flags": 0,
      "tags": [
        "raytracing",
        "ray",
        "intersection",
        "simplex",
        "tetrahedron"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "vec4 to_bary(vec3 p[4], vec3 t) {\n    // plucked straight out of SageMath\n    // it's possible to crunch these equations further but ain't nobody got time for that\n\n//ollj disagreed:\n//ollj knows that using defines and differentiating them \n//is THE way to find patterns:\n\n//#defines may not be faster\n//, but the patterns that you find with them likely are faster\n//or at least make it easier to make special or general cases.\n    \n#define bar0(b,a) ((p[a].z - t.z)*p[3].y - p[a].y*(p[3].z - t.z) - (p[a].z - p[3].z)*t.y)*p[b].x \n//looks like a LABEL_swap (a<->b) happened above. it is correct, do not sweat it!\n#define bar1(a,b) ((p[a].z - t.z)*p[3].y - p[a].y*(p[3].z - t.z) - (p[a].z - p[3].z)*t.y)*p[b].x \n#define bar2(a,b) ((p[a].z - t.z)*p[b].y - p[a].y*(p[b].z - t.z) - (p[a].z - p[b].z)*t.y)*p[3].x \n#define bar3(a,b) ((p[a].z - p[3].z)*p[b].y - p[a].y*(p[b].z - p[3].z) - (p[a].z - p[b].z)*p[3].y)*t.x\nfloat det = (\n+((p[1].z-p[3].z)*p[2].y-p[1].y*(p[2].z-p[3].z)-(p[1].z-p[2].z)*p[3].y)*p[0].x \n-((p[0].z-p[3].z)*p[2].y-p[0].y*(p[2].z-p[3].z)-(p[0].z-p[2].z)*p[3].y)*p[1].x \n+((p[0].z-p[3].z)*p[1].y-p[0].y*(p[1].z-p[3].z)-(p[0].z-p[1].z)*p[3].y)*p[2].x \n-((p[0].z-p[2].z)*p[1].y-p[0].y*(p[1].z-p[2].z)-(p[0].z-p[1].z)*p[2].y)*p[3].x);\nvec3 w=vec3((-bar0(1,2)+bar1(1,2)-bar2(1,2)+bar3(1,2))\n           ,(+bar0(0,2)-bar1(0,2)+bar2(0,2)-bar3(0,2))\n           ,(-bar0(0,1)+bar1(0,1)-bar2(0,1)+bar3(0,1)));\n//return vec4(w,det-(w.x+w.y+w.z))/det;//  det/det!=1. is possible for some det!!!\nreturn vec4(w/det,1)-vec4(0,0,0,(w.x+w.y+w.z))/det;//overly explicit\n}//this kind of looks like a matrix-transpose would be useful,\n\nvec3 from_bary(vec3 p[4], vec4 w)\n{return p[0]*w.x+p[1]*w.y+p[2]*w.z+p[3]*w.w;}\n\n// return the intersection of ray and tetrahedron as well as the barycentric\n// coordinates of the hit points\nbool iSimplex3(vec3 p[4], vec3 ro, vec3 rd, \n               out float near, out float far, \n               out vec4 bnear, out vec4 bfar) {\n    // convert ray endpoints to barycentric basis\n    // this can be optimized further by caching the determinant\n    vec4 r0 = to_bary(p, ro);\n    vec4 r1 = to_bary(p, ro + rd);\n\n    // build barycentric ray direction from endpoints\n    vec4 brd = r1 - r0;\n    // compute ray scalars for each plane\n    vec4 t = -r0/brd;\n    \n    near = -1.0 / 0.0;\n    far = 1.0 / 0.0;    \n    for (int i = 0; i < 4; ++i) {\n        // equivalent to checking dot product of ray dir and plane normal\n        if (brd[i] < 0.0) {\n            far = min(far, t[i]);\n        } else {\n            near = max(near, t[i]);\n        }\n    }\n    \n    bnear = r0 + brd * near;\n    bfar = r0 + brd * far;\n    \n    return (far > 0.0) && (far > near);\n}\n\n////////////////////////////////////////////////////////////////////////\n\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an = iTime * 0.1;\n    float d = 2.5;\n\tcamPos = vec3(d*sin(an),1.0,d*cos(an));\n    camTar = vec3(0.0,-0.3,0.0);\n}\n\n\nvec3 doBackground( void )\n{\n    return vec3( 0.0, 0.0, 0.0);\n}\n\n// from https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * HASHSCALE3);\n\tp3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 feet_curve(float t) {\n    float subt = mod(t, 3.0);\n    float x = sin(radians(min(subt*180.0,180.0)));\n    float a0 = radians((t - subt)/3.0 * 30.0);\n    float a1 = a0 + radians(30.0);\n    float a = mix(a0, a1, min(subt,1.0));\n\treturn vec3(cos(a),sin(a),mix(-1.0,-0.8,x));\n}\n\nvec3 calc_intersection( in vec3 ro, in vec3 rd ) {\n    ro = ro.zxy;\n    rd = rd.zxy;\n    vec3 p[4];\n    float ti = iTime * 8.0;\n    p[0] = feet_curve(ti);\n    p[1] = feet_curve(ti + 12.0 + 1.0);\n    p[2] = feet_curve(ti + 24.0 + 2.0);\n    // do a little spring animation\n    ti = iTime * 4.0;\n    vec2 cuv = hash21(float(int(ti / 5.0))) * 2.0 - 1.0;\n    ti = mod(ti, 5.0) * 2.0;\n    float rk = (10.0 - ti) / (1.0 + (10.0 - ti));\n    float spr = clamp(rk * ((8.0 - sin(ti * 8.0) / (ti * ti))/8.0), 0.0, 2.0);\n    p[3] = vec3(mix(vec2(0.0), cuv, spr), mix(-0.7, 0.5, spr));\n    \n    vec3 l = normalize(vec3(1.0, -1.0, -1.0));\n    \n    float plane_t = -(ro.z + 1.0) / rd.z;\n    \n    float t0, t1;\n    vec4 c0, c1;\n    if (iSimplex3(p, ro, rd, t0, t1, c0, c1)) {\n        vec4 c = (t0 > 0.0)?c0:c1;\n        \n        vec3 n;\n        float lc = min(min(c.x, c.y), min(c.z, c.w));\n        if (c.x == lc) {\n            n = cross(p[2] - p[1], p[3] - p[1]);\n        } else if (c.y == lc) {\n            n = cross(p[0] - p[2], p[3] - p[2]);\n        } else if (c.z == lc) {\n            n = cross(p[1] - p[0], p[3] - p[0]);\n        } else {\n            n = cross(p[2] - p[0], p[1] - p[0]);\n        }\n        n = normalize(n);\n        float lit = max(0.0, dot(l, -n)*0.5+0.5);\n        \n        return lit * (\n              c.x * vec3(0.0, 1.0, 0.5)\n        \t+ c.y * vec3(1.0, 0.5, 0.0)\n            + c.z * vec3(1.0, 0.0, 0.5)\n            + c.w * vec3(0.5, 0.0, 1.0));\n    } else if (plane_t > 0.0) {\n\t    vec3 plane_p = ro + rd * plane_t;\n        float sh = iSimplex3(p, plane_p, -l, t0, t1, c0, c1)?0.2:0.5;\n        return vec3(sh) * abs(rd.z);\n    } else {        \n        return vec3(0.0);\n    }\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, 0.0 );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n\n\tvec3 col = doBackground();\n\n\t// raymarch\n    col = calc_intersection( ro, rd );\n\t   \n    fragColor = vec4( col, 1.0 );\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}