{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "lsBSDm",
      "date": "1412646115",
      "viewed": 13245,
      "name": "Inverse Bilinear",
      "username": "iq",
      "description": "Inverse bilinear interpolation: given a point p and a quad compute the bilinear coordinates of p in the quad. More info [url=http://www.iquilezles.org/www/articles/ibilinear/ibilinear.htm]in this article[/url].",
      "likes": 38,
      "published": 3,
      "flags": 0,
      "tags": [
        "2d",
        "interpolation",
        "bilinear"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 2,
            "src": "/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg",
            "ctype": "texture",
            "channel": 0,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "false",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "// The MIT License\n// Copyright \u00a9 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Inverse bilinear interpolation: given four points defining a quadrilateral, compute the uv\n// coordinates of any point in the plane that would give result to that point as a bilinear \n// interpolation of the four points.\n//\n// The problem can be solved through a quadratic equation. More information in this article:\n//\n// http://www.iquilezles.org/www/articles/ibilinear/ibilinear.htm\n\n\nfloat cross2d( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\n// given a point p and a quad defined by four points {a,b,c,d}, return the bilinear\n// coordinates of p in the quad. Returns (-1,-1) if the point is outside of the quad.\nvec2 invBilinear( in vec2 p, in vec2 a, in vec2 b, in vec2 c, in vec2 d )\n{\n    vec2 res = vec2(-1.0);\n\n    vec2 e = b-a;\n    vec2 f = d-a;\n    vec2 g = a-b+c-d;\n    vec2 h = p-a;\n        \n    float k2 = cross2d( g, f );\n    float k1 = cross2d( e, f ) + cross2d( h, g );\n    float k0 = cross2d( h, e );\n    \n    // if edges are parallel, this is a linear equation. Do not this test here though, do\n    // it in the user code\n    //if( abs(k2)<0.001 )\n    //{\n\t//\t  float v = -k0/k1;\n\t//    float u  = (h.x*k1+f.x*k0) / (e.x*k1-g.x*k0);\n    //    \n    //    if( v>0.0 && v<1.0 && u>0.0 && u<1.0 )  res = vec2( u, v );\n    //}\n\t//else\n    {\n        // otherwise, it's a quadratic\n        float w = k1*k1 - 4.0*k0*k2;\n        if( w<0.0 ) return vec2(-1.0);\n        w = sqrt( w );\n\n        #if 1\n            float ik2 = 0.5/k2;\n            float v = (-k1 - w)*ik2; if( v<0.0 || v>1.0 ) v = (-k1 + w)*ik2;\n            float u = (h.x - f.x*v)/(e.x + g.x*v);\n            if( u<0.0 || u>1.0 || v<0.0 || v>1.0 ) return vec2(-1.0);\n            res = vec2( u, v );\n\t\t#else\n            float v1 = (-k1 - w)/(2.0*k2);\n            float v2 = (-k1 + w)/(2.0*k2);\n            float u1 = (h.x - f.x*v1)/(e.x + g.x*v1);\n            float u2 = (h.x - f.x*v2)/(e.x + g.x*v2);\n            bool  b1 = v1>0.0 && v1<1.0 && u1>0.0 && u1<1.0;\n            bool  b2 = v2>0.0 && v2<1.0 && u2>0.0 && u2<1.0;\n\n            if(  b1 && !b2 ) res = vec2( u1, v1 );\n            if( !b1 &&  b2 ) res = vec2( u2, v2 );\n\t\t#endif\n    }\n    \n    return res;\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nvec3  hash3( float n ) { return fract(sin(vec3(n,n+1.0,n+2.0))*43758.5453123); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    \n    // background\n    vec3 col = vec3( 0.35 + 0.1*p.y );\n\n    // move points\n    vec2 a = cos( 1.11*iTime + vec2(0.1,4.0) );\n    vec2 b = cos( 1.13*iTime + vec2(1.0,3.0) );\n    vec2 c = cos( 1.17*iTime + vec2(2.0,2.0) );\n    vec2 d = cos( 1.15*iTime + vec2(3.0,1.0) );\n\n    // area of the quad\n    vec2 uv = invBilinear( p, a, b, c, d );\n    if( uv.x>-0.5 )\n    {\n        col = texture( iChannel0, uv ).xyz;\n    }\n    \n    // quad borders\n    float h = 2.0/iResolution.y;\n    col = mix( col, vec3(1.0,0.7,0.2), 1.0-smoothstep(h,2.0*h,sdSegment(p,a,b)));\n    col = mix( col, vec3(1.0,0.7,0.2), 1.0-smoothstep(h,2.0*h,sdSegment(p,b,c)));\n    col = mix( col, vec3(1.0,0.7,0.2), 1.0-smoothstep(h,2.0*h,sdSegment(p,c,d)));\n    col = mix( col, vec3(1.0,0.7,0.2), 1.0-smoothstep(h,2.0*h,sdSegment(p,d,a)));\n \n    col += (1.0/255.0)*hash3(p.x+13.0*p.y);\n\n\tfragColor = vec4( col, 1.0 );\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}