{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "MsdyD4",
      "date": "1518994180",
      "viewed": 277,
      "name": "gammatest",
      "username": "hellotanjent",
      "description": "Generates test bars for calibrating gamma correction. MUST be displayed at 1:1 pixel scale.\n\nIf your monitor's contrast and gamma are correct, all bars should look flat and no wave should be visible.",
      "likes": 2,
      "published": 3,
      "flags": 0,
      "tags": [
        "test",
        "gradient",
        "gamma",
        "monitor"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "float gamma(float x) {\n  x = clamp(x, 0.0, 1.0);\n  // srgb standard\n  x = (x < 0.0031308) ? 12.92 * x : (1.0 + 0.055) * pow(x, 1.0 / 2.4) - 0.055;\n  \n  // gamma 2.2\n  //x = pow(x, 1.0 / 2.2);\n  return x;\n}\n\nfloat bit(float x, int bit) {\n    x = fract(x * exp2(float(-bit - 1)));\n    return x < 0.5 ? 0.0 : 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Divide the screen into 7 vertical stripes and make each one a different color.\n    float barX = floor(7.0 * fragCoord.x / iResolution.x) + 1.0;\n    float r = bit(barX, 0);\n    float g = bit(barX, 1);\n    float b = bit(barX, 2);\n    vec4 barColor = vec4(r, g, b, 1.0);\n\n    // Make each horizontal region 1/2 the brightness of the one above it.\n    int barY = int(8.0 * fragCoord.y / iResolution.y);\n    barColor *= exp2(float(barY - 8));\n    \n    // Make a moving horizontal wave pattern with a bit of a flat top and bottom.\n    float waveX = sin((iTime * 2.7 + 15.0 * fragCoord.x / iResolution.x) * 2.0 * 3.14159);\n    waveX *= 1.05;\n    waveX = clamp(waveX * 0.5 + 0.5, 0.0, 1.0);\n\n    // Interpolate between the pure color and a \"checkerboard\" version of the color\n    // based on the wave pattern.\n    float checker = (bit(fragCoord.x, 0) + bit(fragCoord.y, 0)) == 1.0 ? 0.0 : 1.0;\n    checker = checker * 2.0 - 1.0;\n    \n    fragColor = mix(barColor, barColor + barColor * float(checker), waveX);\n    \n    // Convert from linear color to inverse-gamma-corrected color.\n    // When displayed on a calibrated monitor, this will turn back into linear color.\n    fragColor.r = gamma(fragColor.r);\n    fragColor.g = gamma(fragColor.g);\n    fragColor.b = gamma(fragColor.b);\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}