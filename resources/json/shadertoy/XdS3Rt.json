{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "XdS3Rt",
      "date": "1392023597",
      "viewed": 7269,
      "name": "Sphere - visibility",
      "username": "iq",
      "description": "Analytical sphere visibility. Can be used for occlusion culling!  White: spheres don't touch.   Yellow: spheres touch (partial occlusion).   Red: spheres completely occlude each other. I'm expecting the \"Yellow is gay\" joke.",
      "likes": 20,
      "published": 3,
      "flags": 0,
      "tags": [
        "3d",
        "sphere",
        "analytic"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "// The MIT License\n// Copyright \u00a9 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// Analytical sphere visibility, which can be used of occlusion culling, based on this\n//\n// Aarticle I wrote in 2008: http://iquilezles.org/www/articles/sphereocc/sphereocc.htm\n//\n// Related info: http://iquilezles.org/www/articles/spherefunctions/spherefunctions.htm\n\n//-----------------------------------------------------------------\n\n// Return values:\n// 1: spheres don't overlap\n// 2: spheres overlap partially\n// 3: spheres overlap completely (one completelly occludes the other)\n\nint sphereVisibility( in vec4 sA, in vec4 sB, in vec3 c )\n{\n    vec3 ac = sA.xyz - c;\n    vec3 bc = sB.xyz - c;\n\n    float ia = 1.0/length(ac);\n    float ib = 1.0/length(bc);\n\n    float k0 = dot(ac,bc)*ia*ib;\n    float k1 = sA.w*ia;\n    float k2 = sB.w*ib;\n\n\t     if( k0*k0 + k1*k1 + k2*k2 + 2.0*k0*k1*k2 - 1.0 < 0.0 ) return 1;\n\telse if( k0*k0 + k1*k1 + k2*k2 - 2.0*k0*k1*k2 - 1.0 < 0.0 ) return 2;\n\n\treturn 3;\n}\n\n//-----------------------------------------------------------------\n\nfloat iSphere( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return -1.0;\n\treturn -b - sqrt( h );\n}\n\nfloat oSphere( in vec3 pos, in vec3 nor, in vec4 sph )\n{\n    vec3 di = sph.xyz - pos;\n    float l = length(di);\n    return 1.0 - max(0.0,dot(nor,di/l))*sph.w*sph.w/(l*l); \n}\n\n//-----------------------------------------------------------------\n\nvec3 hash3( float n ) { return fract(sin(vec3(n,n+1.0,n+2.0))*43758.5453123); }\n\n//-----------------------------------------------------------------\n\n#define AA 2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float an = 0.6 - 0.5*iTime + 10.0*iMouse.x/iResolution.x;\n    vec3 ro = vec3( 3.5*cos(an), 0.0, 3.5*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n\n    vec4 sph1 = vec4(-1.2,0.7,0.0,1.0);\n    vec4 sph2 = vec4( 1.2,0.0,0.0,1.0);\n    int vis = sphereVisibility( sph1, sph2, ro );\n\n            \n    vec3 tot = vec3(0.0);\n    for( int j=0; j<AA; j++ )\n    for( int i=0; i<AA; i++ )\n    {\n        vec2 off = vec2( float(i), float(j) ) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+off)) / iResolution.y;\n        \n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        float tmin = 10000.0;\n        vec3  nor = vec3(0.0);\n        float occ = 1.0;\n        vec3  pos = vec3(0.0);\n\n        float h = iSphere( ro, rd, sph1 );\n        if( h>0.0 && h<tmin ) \n        { \n            tmin = h; \n            pos = ro + h*rd;\n            nor = normalize(pos-sph1.xyz); \n            occ = oSphere( pos, nor, sph2 );\n            occ *= smoothstep(-0.6,-0.2,sin(20.0*(pos.x-sph1.x)));\n        }\n        h = iSphere( ro, rd, sph2 );\n        if( h>0.0 && h<tmin ) \n        { \n            tmin = h; \n            pos = ro + h*rd;\n            nor = normalize(pos-sph2.xyz); \n            occ = oSphere( pos, nor, sph1 );\n            occ *= smoothstep(-0.6,-0.2,sin(20.0*(pos.z-sph1.z)));\n        }\n\n        vec3 col = vec3(0.02)*clamp(1.0-0.5*length(p),0.0,1.0);\n        if( tmin<100.0 )\n        {\n            col = vec3(0.5);\n            if( vis==1 ) col = vec3(1.0,1.0,1.0);\n            if( vis==2 ) col = vec3(1.0,1.0,0.0);\n            if( vis==3 ) col = vec3(1.0,0.0,0.0);\n            col *= occ;\n            col *= 0.7 + 0.3*nor.y;\n            col *= exp(-0.5*max(0.0,tmin-2.0));\n        }\n\n        tot += pow( col, vec3(0.45) );\n        tot += (1.0/255.0)*hash3(p.x+13.0*p.y);\n    }\n    tot /= float(AA*AA);\n\n\tfragColor = vec4( tot, 1.0 );\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}