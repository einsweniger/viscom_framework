{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "4sGXWd",
      "date": "1467294886",
      "viewed": 336,
      "name": "Scattering shaky effect",
      "username": "CaptCM74",
      "description": "What should i call this, people?",
      "likes": 3,
      "published": 3,
      "flags": 40,
      "tags": [
        "noise",
        "refraction"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 258,
            "src": "/media/previz/buffer01.png",
            "ctype": "buffer",
            "channel": 1,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "\n\nfloat rand(vec2 co){\n   // http://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * (40000.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \n    float overstr = 0.03;\n    float wiggle = 6.0;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float sty = sin(iTime * wiggle * 0.7) * cos(iTime) * 0.001 * wiggle;\n    float stx = cos(iTime * wiggle * 0.7) * sin(iTime) * 0.001 * wiggle;\n    vec4 fc = vec4(1.0);\n\t\n\t\n    \n    //B&W noise\n    vec4 dmap = vec4(vec3(rand(vec2( uv.x + iTime * .000001, uv.y + iTime * .000001 ) ) * 2.),1.0);\n\n    //IChannel0 Can be any picture that looks good. In this case, it's noisy Street pic.\n    \n    fc = texture(iChannel0,vec2(sin(uv.x + (dmap.r * sin(iTime) * overstr)) + stx,sin(uv.y + (dmap.g * cos(iTime) * overstr)) + sty));\n        \n    \n    \n    /*\n    float br = (texture(iChannel1,uv).x + texture(iChannel1,uv).y + texture(iChannel1,uv).z) / 3.0;\n    \n    vec4 crand = vec4(vec3(rand(uv),rand(uv+0.1),rand(uv-0.1)),1.) * 0.2;\n           \n       \n    NOPE\n    \n    if (br < crand.y)\n    {\n    fc = crand;\n    }*/\n \n    fragColor = fc; //texture(iChannel0,uv);\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      },
      {
        "inputs": [],
        "outputs": [],
        "code": "float rand(vec2 co){\n   // http://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * (40000.) * sin(co.x));\n}\n\nvec2 mainSound( float time )\n{\n    \n\n   \n    \n    return (vec2( rand(vec2(time)) ) * max(sin(time),0.4) * max(cos(time),0.3) * 0.03);\n}\n",
        "name": "Sound",
        "description": "",
        "type": "sound"
      },
      {
        "inputs": [
          {
            "id": 258,
            "src": "/media/previz/buffer01.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 257,
            "channel": 0
          }
        ],
        "code": "float rand(vec2 co){\n   // http://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * (40000.));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 crand = vec4(vec3(rand(uv),rand(uv+0.1),rand(uv-0.1)),1.) * 0.2;\n     float br = (texture(iChannel0,uv).x + texture(iChannel0,uv).y + texture(iChannel0,uv).z) / 3.0;\n    \n    fragColor = mix(texture(iChannel0,uv),crand,0.8 - br);\n}",
        "name": "Buf A",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [
          {
            "id": 5,
            "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg",
            "ctype": "texture",
            "channel": 0,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 258,
            "channel": 0
          }
        ],
        "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    fragColor = texture(iChannel0,uv);\n    \n}",
        "name": "Buf B",
        "description": "",
        "type": "buffer"
      }
    ]
  }
}