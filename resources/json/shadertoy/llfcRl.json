{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "llfcRl",
      "date": "1505944082",
      "viewed": 1843,
      "name": "Normals Compression",
      "username": "iq",
      "description": "* Encoding surface normals which are 96 bits normally (pun!)\n* Top to bottom: 32, 24 and 16 bits (6x, 4x and 3x compression)\n* Left to Right: Direct, Cube, ZIgnore, Spherical, Spheremap and Octahedral encoding\n* Error: blue = 0, red = 0.5+ degree",
      "likes": 38,
      "published": 3,
      "flags": 0,
      "tags": [
        "3d",
        "normals",
        "compression"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 24,
            "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg",
            "ctype": "cubemap",
            "channel": 2,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "false",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "// The MIT License\n// Copyright \u00a9 2017 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Encoding surface normals, which are 96 bits normally (pun!), into 16, 24 and 32 bits\n// (6x, 4x and 3x compression respectively). Similar by Aras' blog post\n//\n// http://aras-p.info/texts/CompactNormalStorage.html\n//\n// but more complete hopefully.\n//\n// Left to Right: Direct, ZIgnore, Cube Spherical, Spheremap and Octahedral encoding. \n// Top is 16 bits, middle is 24 bits, bottom is 32 bits. See at full screen for best comparison.\n//\n// Error Color Encoding:   blue = 0.0, red = 0.5 degrees\n// \n//\n// Octaheral compression with different bitrates: https://www.shadertoy.com/view/Mtfyzl\n//\n// You can compare ithese to Fibonacci projection here: https://www.shadertoy.com/view/4t2XWK\n\n\n\n// undef this to try a different shape\n#define SPHERES\n\n//-------------------------------------------------------------------------------------------\nuint   packSnorm2x12(vec2 v) { uvec2 d = uvec2(round(2047.5 + v*2047.5)); return d.x|(d.y<<12u); }\nuint   packSnorm2x8( vec2 v) { uvec2 d = uvec2(round( 127.5 + v* 127.5)); return d.x|(d.y<< 8u); }\nvec2 unpackSnorm2x8( uint d) { return vec2(uvec2(d,d>> 8)& 255u)/ 127.5 - 1.0; }\nvec2 unpackSnorm2x12(uint d) { return vec2(uvec2(d,d>>12)&4095u)/2047.5 - 1.0; }\n\n//-------------------------------------------------------------------------------------------\n\n//----\n\nuint cube_16( in vec3 nor )\n{\n    vec3 mor; uint  id;\n                                    mor = nor.xyz; id = 0u;\n    if( abs(nor.y) > abs(mor.x) ) { mor = nor.yzx; id = 1u; }\n    if( abs(nor.z) > abs(mor.x) ) { mor = nor.zxy; id = 2u; }\n    \n    uint is = (mor.x<0.0)?1u:0u;\n    vec2 uv = 0.5 + 0.5*mor.yz/abs(mor.x);\n    uvec2 iuv = uvec2(round(uv*vec2(127.0,63.0)));\n\n    return iuv.x | (iuv.y<<7u) | (id<<13u) | (is<<15u);\n}\n\nvec3 i_cube_16( uint data )\n{\n    uvec2 iuv = uvec2( data, data>>7u ) & uvec2(127u,63u);\n    vec2 uv = vec2(iuv)*2.0/vec2(127.0,63.0) - 1.0;\n    \n    uint is = (data>>15u)&1u;\n    vec3 nor = vec3((is==0u)?1.0:-1.0,uv.xy);\n\n    uint id = (data>>13u)&3u;\n         if(id==0u) nor = nor.xyz;\n    else if(id==1u) nor = nor.zxy;\n    else            nor = nor.yzx;\n    \n    return normalize(nor);\n}\n\nuint cube_24( in vec3 nor )\n{\n    vec3 mor; uint  id;\n                                    mor = nor.xyz; id = 0u;\n    if( abs(nor.y) > abs(mor.x) ) { mor = nor.yzx; id = 1u; }\n    if( abs(nor.z) > abs(mor.x) ) { mor = nor.zxy; id = 2u; }\n    \n    uint is = (mor.x<0.0)?1u:0u;\n    vec2 uv = 0.5 + 0.5*mor.yz/abs(mor.x);\n    uvec2 iuv = uvec2(round(uv*vec2(2047.0,1023.0)));\n\n    return iuv.x | (iuv.y<<11u) | (id<<21u) | (is<<23u);\n}\n\nvec3 i_cube_24( uint data )\n{\n    uvec2 iuv = uvec2( data, data>>11u ) & uvec2(2047,1023);\n    vec2 uv = vec2(iuv)*2.0/vec2(2047.0,1023.0) - 1.0;\n    \n    uint is = (data>>23u)&1u;\n    vec3 nor = vec3((is==0u)?1.0:-1.0,uv.xy);\n\n    uint id = (data>>21u)&3u;\n         if(id==0u) nor = nor.xyz;\n    else if(id==1u) nor = nor.zxy;\n    else            nor = nor.yzx;\n    \n    return normalize(nor);\n}\n\nuint cube_32( in vec3 nor )\n{\n    vec3 mor; uint  id;\n                                    mor = nor.xyz; id = 0u;\n    if( abs(nor.y) > abs(mor.x) ) { mor = nor.yzx; id = 1u; }\n    if( abs(nor.z) > abs(mor.x) ) { mor = nor.zxy; id = 2u; }\n    \n    uint is = (mor.x<0.0)?1u:0u;\n    vec2 uv = 0.5 + 0.5*mor.yz/abs(mor.x);\n    uvec2 iuv = uvec2(round(uv*vec2(32767.0,16383.0)));\n\n    return iuv.x | (iuv.y<<15u) | (id<<29u) | (is<<31u);\n}\n\nvec3 i_cube_32( uint data )\n{\n    uvec2 iuv = uvec2( data, data>>15u ) & uvec2(32767u,16383u);\n    vec2 uv = vec2(iuv)*2.0/vec2(32767.0,16383.0) - 1.0;\n    \n    uint is = (data>>31u)&1u;\n    vec3 nor = vec3((is==0u)?1.0:-1.0,uv.xy);\n\n    uint id = (data>>29u)&3u;\n         if(id==0u) nor = nor.xyz;\n    else if(id==1u) nor = nor.zxy;\n    else            nor = nor.yzx;\n    \n    return normalize(nor);\n}\n//----\n\nuint zignore_16( in vec3 nor )\n{\n    vec2 v = 0.5 + 0.5*nor.xy;\n    uvec2 d = uvec2(round(v*vec2(127.0,255.0)));\n    uint s = (nor.z<0.0)?1u:0u;\n    return d.x|(d.y<<7u)|(s<<15u);\n}\n\nvec3 i_zignore_16( uint data )\n{\n    uvec3 d = uvec3( data, data>>7, data>>15 ) & uvec3(127u,255u,1u);\n    vec3 v = vec3(d)*2.0/vec3(127.0,255.0,1) - 1.0;\n    v.z = sqrt(1.0 - dot(v.xy, v.xy)) * ((d.z==1u)?-1.0:1.0);\n    return normalize(v);\n}\n\nuint zignore_24( in vec3 nor )\n{\n    vec2 v = 0.5 + 0.5*nor.xy;\n    uvec2 d = uvec2(round(v*vec2(2047.0,4095.0)));\n    uint s = (nor.z<0.0)?1u:0u;\n    return d.x|(d.y<<11u)|(s<<23u);\n}\n\nvec3 i_zignore_24( uint data )\n{\n    uvec3 d = uvec3( data, data>>11, data>>23 ) & uvec3(2047u,4095u,1u);\n    vec3 v = vec3(d)*2.0/vec3(2047.0,4095.0,1) - 1.0;\n    v.z = sqrt(1.0 - dot(v.xy, v.xy)) * ((d.z==1u)?-1.0:1.0);\n    return normalize(v);\n}\n\nuint zignore_32( in vec3 nor )\n{\n    vec2 v = 0.5 + 0.5*nor.xy;\n    uvec2 d = uvec2(round(v*vec2(32767.0,65535.0)));\n    uint s = (nor.z<0.0)?1u:0u;\n    return d.x|(d.y<<15u)|(s<<31u);\n}\n\nvec3 i_zignore_32( uint data )\n{\n    uvec3 d = uvec3( data, data>>15, data>>31 ) & uvec3(32767u,65535u,1u);\n    vec3 v;\n    v.xy = vec2(d.xy)*2.0/vec2(32767.0,65535.0) - 1.0;\n    v.z = sqrt(1.0 - dot(v.xy, v.xy)) * ((d.z==1u)?-1.0:1.0);\n    return normalize(v);\n}\n\n//----\n\nuint direct_16( in vec3 nor )\n{\n    nor /= max(max(abs(nor.x),abs(nor.y)),abs(nor.z)); // optional step (thanks Adam Cichocki), improves quality a bit\n\n    vec3 v = 0.5 + 0.5*nor;\n    uvec3 d = uvec3(round(v*vec3(63.0,31.0,31.0)));\n    return d.x|(d.y<<6u)|(d.z<<11u);\n}\n\nvec3 i_direct_16( uint data )\n{\n    uvec3 d = uvec3( data, data>>6, data>>11 ) & uvec3(63u,31u,31u);\n    vec3 v = vec3(d)*2.0/vec3(63.0,31.0,31.0) - 1.0;\n    return normalize(v);\n}\n\nuint direct_24( in vec3 nor )\n{\n    nor /= max(max(abs(nor.x),abs(nor.y)),abs(nor.z));\n\n    vec3 v = 0.5 + 0.5*nor;\n    uvec3 d = uvec3(round(v*255.0));\n    return d.x|(d.y<<8u)|(d.z<<16u);\n}\n\nvec3 i_direct_24( uint data )\n{\n    uvec3 d = uvec3( data, data>>8, data>>16 ) & 255u;\n    vec3 v = vec3(d)/127.5 - 1.0;\n    \n    return normalize( v );\n}\n\nuint direct_32( in vec3 nor )\n{\n    nor /= max(max(abs(nor.x),abs(nor.y)),abs(nor.z));\n\n    vec3 v = 0.5 + 0.5*nor;\n    uvec3 d = uvec3(round(v*vec3(2047.0,1023.0,2047.0)));\n    return d.x|(d.y<<11u)|(d.z<<21u);\n}\n\nvec3 i_direct_32( uint data )\n{\n    uvec3 d = uvec3( data, data>>11, data>>21 ) & uvec3(2047u,1023u,2047u);\n    vec3 v = vec3(d)*2.0/vec3(2047.0,1023.0,2047.0) - 1.0;\n    return normalize(v);\n}\n\n\n//----\n\n\nuint spherical_16( in vec3 nor )\n{\n    vec2 v = vec2( atan(nor.z,nor.x)/3.141593, -1.0+2.0*acos(nor.y)/3.141593 );\n    return packSnorm2x8(v);\n}\n\nvec3 i_spherical_16( uint data )\n{\n    vec2 v = unpackSnorm2x8(data);\n    v.y = 0.5+0.5*v.y; v *= 3.141593;\n    return normalize( vec3( sin(v.y)*cos(v.x), cos(v.y), sin(v.y)*sin(v.x) ));\n\n}\n\nuint spherical_24( in vec3 nor )\n{\n    vec2 v = vec2( atan(nor.z,nor.x)/3.141593, -1.0+2.0*acos(nor.y)/3.141593 );\n    return packSnorm2x12(v);\n}\n\nvec3 i_spherical_24( uint data )\n{\n    vec2 v = unpackSnorm2x12(data);\n    v.y = 0.5+0.5*v.y; v *= 3.141593;\n    return normalize( vec3( sin(v.y)*cos(v.x), cos(v.y), sin(v.y)*sin(v.x) ));\n\n}\n\nuint spherical_32( in vec3 nor )\n{\n    vec2 v = vec2( atan(nor.z,nor.x)/3.141593, -1.0+2.0*acos(nor.y)/3.141593 );\n    return packSnorm2x16(v);\n}\n\nvec3 i_spherical_32( uint data )\n{\n    vec2 v = unpackSnorm2x16(data);\n    v.y = 0.5+0.5*v.y; v *= 3.141593;\n    return normalize( vec3( sin(v.y)*cos(v.x), cos(v.y), sin(v.y)*sin(v.x) ));\n}\n\n//----\n\nuint spheremap_16( in vec3 nor )\n{\n    vec2 v = nor.xy*inversesqrt(2.0*nor.z+2.0);\n    return packSnorm2x8(v);\n}\n\nvec3 i_spheremap_16( uint data )\n{\n    vec2 v = unpackSnorm2x8(data);\n    float f = dot(v,v);\n    return vec3( 2.0*v*sqrt(1.0-f), 1.0-2.0*f );\n}\n\nuint spheremap_24( in vec3 nor )\n{\n    vec2 v = nor.xy*inversesqrt(2.0*nor.z+2.0);\n    return packSnorm2x12(v);\n}\n\nvec3 i_spheremap_24( uint data )\n{\n    vec2 v = unpackSnorm2x12(data);\n    float f = dot(v,v);\n    return vec3( 2.0*v*sqrt(1.0-f), 1.0-2.0*f );\n}\n\nuint spheremap_32( in vec3 nor )\n{\n    vec2 v = nor.xy * inversesqrt(2.0*nor.z+2.0);\n    return packSnorm2x16(v);\n}\n\nvec3 i_spheremap_32( uint data )\n{\n    vec2 v = unpackSnorm2x16(data);\n    float f = dot(v,v);\n    return vec3( 2.0*v*sqrt(1.0-f), 1.0-2.0*f );\n}\n\n//----\n\nvec2 msign( vec2 v )\n{\n    return vec2( (v.x>=0.0) ? 1.0 : -1.0, \n                 (v.y>=0.0) ? 1.0 : -1.0 );\n}\n\n\nuint octahedral_16( in vec3 nor )\n{\n    nor /= ( abs( nor.x ) + abs( nor.y ) + abs( nor.z ) );\n    nor.xy = (nor.z >= 0.0) ? nor.xy : (1.0-abs(nor.yx))*msign(nor.xy);\n    return packSnorm2x8(nor.xy);\n}\n\nvec3 i_octahedral_16( uint data )\n{\n    vec2 v = unpackSnorm2x8(data);\n    \n    vec3 nor = vec3(v, 1.0 - abs(v.x) - abs(v.y)); // Rune Stubbe's version,\n    float t = max(-nor.z,0.0);                     // much faster than original\n    nor.x += (nor.x>0.0)?-t:t;                     // implementation of this\n    nor.y += (nor.y>0.0)?-t:t;                     // technique\n    \n    return normalize( nor );\n}\n\nuint octahedral_24( in vec3 nor )\n{\n    nor /= ( abs( nor.x ) + abs( nor.y ) + abs( nor.z ) );\n    nor.xy = (nor.z >= 0.0) ? nor.xy : (1.0-abs(nor.yx))*msign(nor.xy);\n    return packSnorm2x12(nor.xy);\n}\n\nvec3 i_octahedral_24( uint data )\n{\n    vec2 v = unpackSnorm2x12(data);\n\n    vec3 nor = vec3(v, 1.0 - abs(v.x) - abs(v.y)); // Rune Stubbe's version,\n    float t = max(-nor.z,0.0);                     // much faster than original\n    nor.x += (nor.x>0.0)?-t:t;                     // implementation of this\n    nor.y += (nor.y>0.0)?-t:t;                     // technique\n\n    return normalize( nor );\n}\n\nuint octahedral_32( in vec3 nor )\n{\n    nor /= ( abs( nor.x ) + abs( nor.y ) + abs( nor.z ) );\n    nor.xy = (nor.z >= 0.0) ? nor.xy : (1.0-abs(nor.yx))*msign(nor.xy);\n\n    return packSnorm2x16(nor.xy);\n    //uvec2 d = uvec2(round(32767.5 + nor.xy*32767.5));  return d.x|(d.y<<16u);\n}\n\nvec3 i_octahedral_32( uint data )\n{\n    vec2 v = unpackSnorm2x16(data);\n    //uvec2 iv = uvec2( data, data>>16u ) & 65535u; vec2 v = vec2(iv)/32767.5 - 1.0;\n    \n    vec3 nor = vec3(v, 1.0 - abs(v.x) - abs(v.y)); // Rune Stubbe's version,\n    float t = max(-nor.z,0.0);                     // much faster than original\n    nor.x += (nor.x>0.0)?-t:t;                     // implementation of this\n    nor.y += (nor.y>0.0)?-t:t;                     // technique\n\n    return normalize( nor );\n}\n\n//=============================================================\n\nfloat map( vec3 p )\n{\n    p.x *= 0.8;\n    p *= 2.6;\n    p.xyz += 1.000*sin(  2.0*p.yzx );\n    //p.xyz -= 0.500*sin(  4.0*p.yzx );\n    float d = length( p.xyz ) - 1.5;\n\treturn d * 0.15;\n}\n\n\nfloat intersect( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 4.0;\n\n\tfloat precis = 0.001;\n    float h = 1.0;\n    float t = 1.0;\n    for( int i=0; i<256; i++ )\n    {\n        if( (h<precis) || (t>maxd) ) break;\n\t    h = map( ro+rd*t );\n        t += h;\n    }\n\n    if( t>maxd ) t=-1.0;\n\treturn t;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    // from Paul Malin (4 samples only in a tetrahedron\t\n    vec2 e = vec2(1.0,-1.0)*0.002;\n    return normalize( e.xyy*map( pos + e.xyy ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ) );\n}\n\n//============================================================\n#define AA 2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n    \n    for( int j=0; j<AA; j++ )\n    for( int i=0; i<AA; i++ )\n    {\n        vec2 off = vec2(i,j)/float(AA) - 0.5;\n        \n        vec2  uv = vec2(6.0,3.0)*(fragCoord+off)/iResolution.xy;\n        ivec2 cx = ivec2(uv);\n        int   id = cx.y*6 + cx.x;\n        vec2  px = uv - vec2(cx);\n\n        float anim = cos( 0.15*iTime + 2.2 );\n        float zoom = smoothstep( 0.2, 0.5, anim ); \n        float serr = smoothstep( 0.85, 0.9, abs(anim) ); \n\n\n        //-----------------------------------------------------\n        // camera\n        //-----------------------------------------------------\n        vec2  p = (-1.0+2.0*px) * 4.6 / (vec2(6.0*iResolution.y,3.0*iResolution.x)/iResolution.y);\n        vec3 ro = vec3(0.0,0.3*zoom,2.9);\n\n        vec3 ta = vec3(0.0,0.0,0.0);\n\n        vec3 rd = normalize( vec3(p.xy,-2.0-6.0*zoom) );\n\n        vec3 col = vec3(0.0);\n\n        //-----------------------------------------------------\n        // intersect geometry\n        //-----------------------------------------------------\n        #ifdef SPHERES\n        float b = dot( ro, rd );\n        float c = dot( ro, ro ) - 1.0;\n        float h = b*b - c;\n        #else\n        float h = intersect( ro, rd );\n        #endif\n        if( h>0.0 )\n        {\n            #ifdef SPHERES\n            // compute intersection\n            float t = -b - sqrt( h );\n            // compute normal\n            vec3 nor = normalize( ro + t*rd );\n            #else\n            vec3 pos = ro + h*rd;\n            vec3 nor = calcNormal( pos );\n            #endif\n\n            //-----------------------------------------------------\n            // compress/encode and decompress/decode normal\n            //-----------------------------------------------------\n            uint data = 0u;\n            vec3 mor = vec3(0.0);\n\n                 if( id==  0 ) { data = direct_32( nor );     mor = i_direct_32( data );}\n            else if( id==  1 ) { data = cube_32( nor );       mor = i_cube_32( data );}\n            else if( id==  2 ) { data = zignore_32( nor );    mor = i_zignore_32( data );}\n            else if( id==  3 ) { data = spherical_32( nor );  mor = i_spherical_32( data );}\n            else if( id==  4 ) { data = spheremap_32( nor );  mor = i_spheremap_32( data );}\n            else if( id==  5 ) { data = octahedral_32( nor ); mor = i_octahedral_32( data );}\n            \n            else if( id==  6 ) { data = direct_24( nor );     mor = i_direct_24( data );}\n            else if( id==  7 ) { data = cube_24( nor );       mor = i_cube_24( data );}\n            else if( id==  8 ) { data = zignore_24( nor );    mor = i_zignore_24( data );}\n            else if( id==  9 ) { data = spherical_24( nor );  mor = i_spherical_24( data );}\n            else if( id== 10 ) { data = spheremap_24( nor );  mor = i_spheremap_24( data );}\n            else if( id== 11 ) { data = octahedral_24( nor ); mor = i_octahedral_24( data );}\n            \n            else if( id== 12 ) { data = direct_16( nor );     mor = i_direct_16( data );}\n            else if( id== 13 ) { data = cube_16( nor );       mor = i_cube_16( data );}\n            else if( id== 14 ) { data = zignore_16( nor );    mor = i_zignore_16( data );}\n            else if( id== 15 ) { data = spherical_16( nor );  mor = i_spherical_16( data );}\n            else if( id== 16 ) { data = spheremap_16( nor );  mor = i_spheremap_16( data );}\n            else               { data = octahedral_16( nor ); mor = i_octahedral_16( data );}\n\n\n            //-----------------------------------------------------\n            // render reflection\n            //-----------------------------------------------------\n\n            vec3 ref = reflect( rd, mor );\n            col = texture(iChannel2,ref).xyz;\n\n            if( p.x>0.0 )\n            {\n                col = 0.4 + 0.4*ref + 32.0*pow( clamp(dot(ref,vec3(0.5773)),0.0,1.0), 128.0 );\n            }\n\n            // error\n            float err = acos(dot(mor,nor));\n            err = clamp( err/radians(0.5), 0.0, 1.0 );\n            col = mix( col, 0.5 - 0.5*cos( sqrt(err)*3.1416 + vec3(0.0,2.0,4.0) ), serr );\n\n            // a bit of shading...\n            col *= abs(mor.z);\n        }\n        tot += col;\n    }   \n    tot /= float(AA*AA);\n    \n    fragColor = vec4( tot, 1.0 );\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}