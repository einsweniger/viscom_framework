{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "Xtsczn",
      "date": "1503157389",
      "viewed": 161,
      "name": "More Distance",
      "username": "TimoKinnunen",
      "description": "Distance function comparison over full floating point range. Use mouse to move the target point. ",
      "likes": 0,
      "published": 3,
      "flags": 0,
      "tags": [
        "distance",
        "function",
        "accuracy",
        "improve"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "////////////////////////////////////////\n//\n// More Distance  by Timo Kinnunen 2017\n//\n// Comparison of two alternative distance functions\n// and the builtin function over the whole 32bit\n// floating point range, around 2^-128 to 2^+128.\n//\n// Use mouse to move the target point around.\n//\n// Default function is in red. On my computer it\n// only produces usable results for about half of\n// the available value range. Disappointing.\n//\n// The current and future exponents is plotted in black.\n// White color indicates large or infinite values.\n// Fully saturated R,G,B colors indicate zeros.\n//\n// Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n//\n//////////////////////////////////////////////////////////////////////////////\n\nfloat distanceApprox(vec2 a, vec2 b) {\n    vec4 t = vec4(abs(a- .5* (b+ a)),0,0);\n    t.xy = vec2(t.y >= t.x ? t.x : t.y,t.y >= t.x ? t.y : t.x);\n    t = t.x* vec4(1.0234375,0.5546875,1.296875, 0.1796875)+\n        t.y* vec4(1.71875,  1.921875, 1.5234375,1.9921875);\n    t.xy = vec2(t.x >= t.z ? t.x : t.z,t.y >= t.w ? t.y : t.w);\n    return t.x >= t.y ? t.x : t.y;\n}\n// By TechEpic @ https://www.shadertoy.com/view/ldfBz2\nfloat distanceArctan(vec2 a, vec2 b) {\n    return abs(a.x- b.x)/ abs(sin(atan(a.x- b.x,a.y- b.y)));\n}\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    int band = int(fragCoord.y* 3./ iResolution.y);\n\tvec2 uv = mod(fragCoord.xy,iResolution.xy/ vec2(1,3))/ iResolution.x;\n    vec2 mo = mod(iMouse.xy,iResolution.xy/ vec2(1,3))/ iResolution.x;\n    vec2 ex = vec2(129,1)* sin(vec2(iTime,iTime+ fragCoord.x/ 60.)* 0.125);\n    uv *= exp2(ex.x);\n    mo *= exp2(ex.x);\n    float d3 = distanceApprox(uv, mo);\n    float d2 = distanceArctan(uv, mo);\n    float d1 = distance(uv, mo);\n    d3 *= exp2(-ex.x);\n    d2 *= exp2(-ex.x);\n    d1 *= exp2(-ex.x);\n    vec3 colors = band == 0 ? vec3(1,d1,d1) : band == 1 ? vec3(d2,1,d2) : vec3(d3,d3,1);\n    colors = clamp(colors*(2.0+ex.y),0.,1.);\n    colors *= smoothstep(1.,3.,abs(fragCoord.y- iResolution.y* 0.45* (1.125+ ex.y)));\n\tfragColor = vec4(colors,1);\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}