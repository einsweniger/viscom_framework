{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "ld3fzH",
      "date": "1524050174",
      "viewed": 129,
      "name": "Buggy Drive",
      "username": "nightfox",
      "description": "Eternal buggy drive through slippery grassy hills",
      "likes": 0,
      "published": 3,
      "flags": 0,
      "tags": [
        "3d",
        "landscape"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 17,
            "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png",
            "ctype": "texture",
            "channel": 1,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 47,
            "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png",
            "ctype": "texture",
            "channel": 0,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "#define MIN_DIST .005\n#define MAX_STEPS 300\n\nfloat height(vec3 ro) {return texture(iChannel0,vec2(ro.x/100.,ro.z/100.)).x*7.;}\n\nvec2 plane(vec3 ro, vec3 pos) {\n    float h = height(ro);\n    h += texture(iChannel1,vec2(ro.x/2.,ro.z/2.)).x/4.;\n \treturn vec2(ro.y-pos.y-h, abs(sin(ro.x/2.)+cos(ro.z/2.)));   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv -= .5;\n    uv *= 2.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float speed = 2.;\n    float zoom = 2.;\n    float angle = 0.;\n    vec3 up = vec3(sin(angle),cos(angle),0.);\n    vec3 ro = vec3(2.*sin(.2*iTime),4.1,speed*iTime);\n    ro.y = height(ro)+.3;\n    float heightFront = height(vec3(ro.x,ro.y,ro.z+.75));\n    vec3 target = vec3(4.*sin(.1+.2*iTime)/heightFront,heightFront,ro.z+1.);\n    vec3 f = normalize(target-ro);\n    vec3 r = cross(up,f);\n    vec3 u = cross(f,r);\n    vec3 c = ro + f*zoom;\n    vec3 camera = c + uv.x*r + uv.y*u;\n    vec3 rd = normalize(camera-ro);\n    vec3 ray = ro;\n    \n    // Sky\n    vec3 col = vec3(0.,.6,1.)+texture(iChannel0,vec2((uv.x+camera.x*2.)/6.,uv.y+camera.y*2.)).rgb;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec2 d = plane(ray, vec3(0.,0.,0.));\n        if (d.x < MIN_DIST) {\n          float light = .3/pow(distance(ray,ro)/5.+.1,1.6)*distance(ray,ro)*.1;\n          light += .1/pow(distance(ray,ro)+.1,2.6);\n          col = vec3(.14*light+.01,.6*light+.04,.13*light+.01)*2.;\n          break;\n        }\n        \n        ray += rd*d.x;\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}