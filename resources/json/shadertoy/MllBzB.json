{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "MllBzB",
      "date": "1512394050",
      "viewed": 189,
      "name": "Checkerboard Reconstruction",
      "username": "BlueSkyDefender",
      "description": "Simple Checkerboard Reconstruction shader. My first shader in Shader Toy.\n\nPress R to toggle between Checkerboard Reconstruction & Checkerboard Image without reconstruction.",
      "likes": 0,
      "published": 3,
      "flags": 16,
      "tags": [
        "checkerboard"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 11,
            "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv",
            "ctype": "video",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 33,
            "src": "/presets/tex00.jpg",
            "ctype": "keyboard",
            "channel": 3,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "//If you like divide iResolution.xy by 2-10.\n//10 will give you a way better idea.\n\n#define division 1.0\n\nconst int KEY_R  = 82;\n\nvec4 CBImage(vec2 fragCoord )\n{   \n\t//Checkerboard Image lets remove half the information.\n\tfloat gridy = floor(fragCoord.y*(iResolution.y/division)); //Native if no division\n\tfloat gridx = floor(fragCoord.x*(iResolution.x/division)); //Native if no division\n\n    bvec2 BC = lessThan(vec2(int(gridy+gridx) & 1,int(gridy+gridx) & 1), vec2(0.5,0.5)); \n      \n    return BC.x ? vec4(0,0,0,0) : texture(iChannel0,fragCoord);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 texCoord = fragCoord.xy/iResolution.xy;\n   \n   //Bilinear Filter for reconstruction\n   vec2 pix = 1.0/(iResolution.xy/division);\n   vec2 fracInfo = texCoord * (iResolution.xy/division);\n\n   vec4 tl = CBImage(texCoord);\n    \n   vec4 tr = CBImage(texCoord + vec2(pix.x, 0.0));\n   vec4 bl = CBImage(texCoord + vec2(0.0, pix.y));\n   vec4 br = CBImage(texCoord + vec2(pix.x, pix.y));\n    \n    \n   vec2 f = fract( fracInfo );\n    \n   vec4 tA = mix( tl, tr, f.x );\n   vec4 tB = mix( bl, br, f.x );\n   vec4 CBdone = mix( tA, tB, f.y );\n    \n   \n    //Saturation correction\n    //May not be needed in your use of this shader.\n    float gs = dot(CBdone.rgb, vec3(0.3, 0.59, 0.11));\n    vec3 sat = mix(vec3(gs,gs,gs), CBdone.rgb, tl.a * 2.0);\n    \n    vec4 done = vec4(sat,tl.a) * 2.0;//2.0 Gamma correction.\n    \n    //R Key Toggle\n    float Key = texelFetch( iChannel3, ivec2(KEY_R,2),0 ).x;\n    \n    if(Key > 0.5) \n    {\n \t\tdone = tl;\n\t}\n \n    \n  \tfragColor = done;\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}