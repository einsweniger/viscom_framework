{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "4sccRj",
      "date": "1519473312",
      "viewed": 258,
      "name": "playing with feedback",
      "username": "piotrekli",
      "description": "Press space to reset.",
      "likes": 8,
      "published": 3,
      "flags": 48,
      "tags": [
        "2d",
        "feedback"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 260,
            "src": "/media/previz/buffer03.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      },
      {
        "inputs": [
          {
            "id": 30,
            "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png",
            "ctype": "texture",
            "channel": 1,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 260,
            "src": "/media/previz/buffer03.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 257,
            "channel": 0
          }
        ],
        "code": "// Horizontal blur\n\n#define G(i) T(i, 0)*F(float(i))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec4 col = vec4(0.0);\n    col += BLUR;\n    col /= col.w;\n    fragColor = col;\n}",
        "name": "Buf A",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [
          {
            "id": 30,
            "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png",
            "ctype": "texture",
            "channel": 1,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 258,
            "channel": 0
          }
        ],
        "code": "// Vertical blur\n\n#define G(i) T(0, i)*F(float(i))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec4 col = vec4(0.0);\n    col += BLUR;\n    col /= col.w;\n    fragColor = col;\n}",
        "name": "Buf B",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [],
        "outputs": [],
        "code": "// I know about texelFetch, but my browser doesn't seem to support it :(\n#define T(x,y) vec4(texture(iChannel0, fract((fragCoord+vec2(x,y))/iResolution.xy)).xyz, 1)\n#define F(i) (f(i))\n#define BLUR (G(-4) + G(-3) + G(-2) + G(-1) + G(0) + G(1) + G(2) + G(3) + G(4))\n\nconst float PI = atan(0., -1.);\nfloat f(float i)\n{\n    return exp(-i*i/4.)/sqrt(4.*PI);\n}",
        "name": "Common",
        "description": "",
        "type": "common"
      },
      {
        "inputs": [
          {
            "id": 30,
            "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png",
            "ctype": "texture",
            "channel": 1,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 33,
            "src": "/presets/tex00.jpg",
            "ctype": "keyboard",
            "channel": 3,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 258,
            "src": "/media/previz/buffer01.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 259,
            "channel": 0
          }
        ],
        "code": "// Transformation\n\nmat2 rot(float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy-0.5;\n    if (iFrame < 30 || texture(iChannel3, vec2(32./255., 0.0)).x > 0.5)\n    {\n        fragColor = texture(iChannel1, uv+0.5);\n        return;\n    }\n    uv = uv*rot(0.001)*0.99;\n    vec4 col = texture(iChannel0, fract(uv+0.5));\n    fragColor = col;\n}",
        "name": "Buf C",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [
          {
            "id": 16,
            "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png",
            "ctype": "texture",
            "channel": 1,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 259,
            "src": "/media/previz/buffer02.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 260,
            "channel": 0
          }
        ],
        "code": "// Sharpening\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy-0.5;\n    vec4 col = T(-1, -1)*0.05 + T( 0, -1)*0.20 + T( 1, -1)*0.05 +\n               T(-1,  0)*0.20 - T( 0,  0)*1.00 + T( 1,  0)*0.20 +\n               T(-1,  1)*0.05 + T( 0,  1)*0.20 + T( 1,  1)*0.05;\n    col /= 8.0;\n    col = T(0, 0) - col*50.0;\n    col -= 0.5;\n    col = col*0.7;\n    col = smoothstep(vec4(-0.5), vec4(0.5), col);\n    col = mix(col, vec4(length(col.xyz)/sqrt(3.)), 0.01);\n    fragColor = col;\n}",
        "name": "Buf D",
        "description": "",
        "type": "buffer"
      }
    ]
  }
}