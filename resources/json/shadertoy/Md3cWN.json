{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "Md3cWN",
      "date": "1518858909",
      "viewed": 192,
      "name": "glitch effect test",
      "username": "yasuo",
      "description": "code from http://glslsandbox.com/e#30736.1\nPlease be careful to watch! it's too bright.",
      "likes": 0,
      "published": 3,
      "flags": 0,
      "tags": [
        "effect",
        "glitch"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 5,
            "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg",
            "ctype": "texture",
            "channel": 0,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "// code from http://glslsandbox.com/e#30736.1\n\nfloat size = 100.0;\nfloat speed= 5.0;\n\nfloat randomize(vec2 coords){\n    //http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\n    highp float a = 12.9898;\n        highp float b = 78.233;\n        highp float c = 43758.5453;\n        highp float dt= dot(coords.xy ,vec2(a,b));\n        highp float sn= mod(dt,3.14);\n        return fract(sin(sn) * c);\n}\n\nvec3 getColor(vec2 coords){\n    coords.x = coords.x-mod(coords.x, size);\n    coords.y = coords.y-mod(coords.y, size);\n    \n    float r = randomize(coords.xy+vec2(sin(iTime*0.5)));\n    float g = randomize(coords.xy * 20.0+vec2(sin(iTime*0.5)));\n    float b = randomize(coords.xy * 37.0+vec2(sin(iTime*0.5)));\n    return vec3(r,g,b);\n}\n\nbool inSize(vec2 coords){\n    vec2 box = coords.xy-mod(coords.xy, size);\n    vec2 center = box+(size/2.0);\n    float size = (tan((iTime * speed)+(randomize(box*18.0)*2.0))/2.0)*(size);\n    return (abs(coords.x-center.x) < size && abs(coords.y-center.y) < size);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = vec3(texture(iChannel0,uv+vec2(0.1,0.0)));\n    if (inSize(fragCoord)) col = vec3(texture(iChannel0,uv))*getColor(fragCoord);\n    fragColor = vec4(col,1.0);\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}