{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "ldBBDd",
      "date": "1502756783",
      "viewed": 484,
      "name": "ADSR visualisation",
      "username": "kloumpt",
      "description": "Drifted away from a configurable adst after realizing the sound shader was not able to access inputs in realtime",
      "likes": 2,
      "published": 3,
      "flags": 42,
      "tags": [
        "adsr"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 17,
            "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png",
            "ctype": "texture",
            "channel": 1,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "float rand(vec2 p) {\n    return texture(iChannel1, p / iChannelResolution[1].xy).x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 color = texture(iChannel0, uv).rgb;\n    \n    \n\tfragColor = vec4(color,1.0);\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      },
      {
        "inputs": [
          {
            "id": 17,
            "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png",
            "ctype": "texture",
            "channel": 1,
            "sampler": {
              "filter": "nearest",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 28,
            "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png",
            "ctype": "texture",
            "channel": 0,
            "sampler": {
              "filter": "nearest",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [],
        "code": "#define PRESS_LENGTH 0.3\n\n#define ATTACK  0.0125\n#define DECAY   0.1\n#define SUSTAIN 0.5\n#define RELEASE 0.1 + (time / 500.0)\n\n\nfloat get_envelope(float time, float A, float D, float S, float R, float time_since_released) {\n    float value = 0.0;\n    if (time < A) {\n        value = time / A;\n    } else if (time < A + D) {\n        value = mix(1.0, S, (time - A) / D);\n    } else {\n        value = S;\n    }\n    \n    if (time_since_released > 0.0) {\n        value =  mix(value, 0., time_since_released / R);\n    }\n    \n    return value;\n}\n\n\n\n\nbool get_key(float ascii) {\n    return 1.0 == texture(iChannel0, vec2((ascii) / 256.0, .25)).x;\n}\n\n\nfloat get_channel_1_value(float time, float note_id, float note_time, float NOTE_LENGTH) {\n    \n    \n    float envelope = get_envelope(note_time, ATTACK, DECAY, SUSTAIN, RELEASE, max(0.0, note_time - PRESS_LENGTH) );\n    \n    float freq = 110.0 + 55.0 * texture(iChannel0, vec2(note_id, 0.0) / iChannelResolution[0].xy).x;\n    float tune = abs(mod(note_time * freq, 1.0) * 2.0 - 1.0) * 2.0 - 1.0;\n    return tune * envelope;\n}\n\n\n\nfloat get_channel_2_value(float time, float note_id, float note_time, float NOTE_LENGTH) {\n    float envelope = get_envelope(note_time, ATTACK, DECAY, SUSTAIN, RELEASE, max(0.0, note_time - PRESS_LENGTH) );\n    \n    float freq = 70.0 + 25.0 * texture(iChannel0, vec2(note_id , 1.0) / iChannelResolution[0].xy).x;\n    float tune = abs(mod(note_time * freq, 1.0) * 2.0 - 1.0) * 2.0 - 1.0;\n    return tune * envelope;\n}\n\n\nfloat get_channel_3_value(float time) {\n    return 2.0 * (0.5 + 0.5 * texture(iChannel0, vec2(time, 2.0) / iChannelResolution[0].xy).x) *  (texture(iChannel1, vec2(time, 0.0 / iChannelResolution[1].y)).x - 0.5) ;\n}\n    \n        \n\nvec2 mainSound( float time ) {\n    \n    float NOTE_LENGTH = PRESS_LENGTH + RELEASE;\n    \n    \n    float channel_1_note_id = floor(time / NOTE_LENGTH);\n   \tfloat channel_1_note_time =  time - channel_1_note_id * NOTE_LENGTH;\n    \n    \n    float channel_2_note_id = floor((time * 0.95) / NOTE_LENGTH);\n   \tfloat channel_2_note_time =  time - channel_2_note_id * NOTE_LENGTH;\n    \n     \n    \n    float channel_1 = get_channel_1_value(time, channel_1_note_id, channel_1_note_time, NOTE_LENGTH);\n    \n    float channel_2 = get_channel_2_value(time, channel_2_note_id, channel_2_note_time, NOTE_LENGTH);\n    \n    float channel_3 = get_channel_3_value(time);\n    \n   \n    \n    return vec2(channel_1 + channel_2 * 0.5 + 0.3 * max(0.0, 1.0 - abs(channel_1) - abs(channel_2)) * channel_3);\n}",
        "name": "Sound",
        "description": "",
        "type": "sound"
      },
      {
        "inputs": [
          {
            "id": 17,
            "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png",
            "ctype": "texture",
            "channel": 1,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 31,
            "src": "/presets/webcam.png",
            "ctype": "webcam",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 2,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 257,
            "channel": 0
          }
        ],
        "code": "float rand(vec2 p) {\n    return texture(iChannel1, p / iChannelResolution[1].xy).x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    \n    vec2 offset = vec2((rand(fragCoord) * 2.0 - 1.0), (rand(15. + fragCoord) * 2.0 - 1.0));\n    offset *= cos((iTime + offset) * 3.1415)  * 0.02 * vec2(sin(iTime), cos(iTime));\n    \n    vec3 color = texture(iChannel0, vec2(1.0 - uv.x, uv.y) + offset).rgb;\n    \n    float intensity = color.r * 0.3 + color.b * 0.2 + color.g * 0.5;\n    intensity += 0.0 * length(offset);\n    \n    intensity = intensity * 0.5 + 0.9 * texture(iChannel2, uv + vec2(0.0, 1.0 / iResolution.y)).x;\n    \n\tfragColor = vec4(vec3(1.0, 0.9, 0.8) * intensity ,1.0);\n}",
        "name": "Buf A",
        "description": "",
        "type": "buffer"
      }
    ]
  }
}