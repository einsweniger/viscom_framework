{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "MdG3Wy",
      "date": "1456155828",
      "viewed": 395,
      "name": "Rorschach visuals",
      "username": "s23b",
      "description": "simple visualizer I threw together. music by [url=https://soundcloud.com/fish_man/forteo-frgvm]vekt![/url]\n\nupdate: it's the [url=https://youtu.be/O2KHQJXWm7A]official music video[/url] now :)",
      "likes": 10,
      "published": 3,
      "flags": 96,
      "tags": [
        "tutorial",
        "visualizer",
        "rorschach"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "// first experiment with soundcloud data processing\n// see Buf A for details\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      },
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 1,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 2182,
            "src": "https://soundcloud.com/fish_man/forteo-frgvm",
            "ctype": "musicstream",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 257,
            "channel": 0
          }
        ],
        "code": "#define PI 3.14159265359\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\t\n    // center coordinates\n    vec2 coord = uv * 2. - 1.;\n    coord.x *= iResolution.x / iResolution.y;\n    \n    // calculate angle\n    float angle = abs(atan(coord.x, coord.y)) / PI;\n    \n    // fetch wave at angle\n    float amplitude = texture(iChannel0, vec2(angle, .75)).x;\n    \n    // fetch amplitude at the 'click' frequency ( ~.75)\n    float click = texture(iChannel0, vec2(.75, 0.25)).x;\n    \n    // zoom accordingly\n    float scale = (.2 - click * 20.) * iTimeDelta;\n    \n    // create current image\n    vec4 current = vec4(vec3(step(amplitude, length(coord))), 1.);\n    \n    // get scaled version of the previous frame\n    vec4 previous = texture(iChannel1, uv * (1. + scale) - scale / 2.);\n\n    // mix in the frame weighted differently on the RGB channels\n    fragColor = mix(current, previous, vec4(.9,.8,.7,1.));\n}",
        "name": "Buf A",
        "description": "",
        "type": "buffer"
      }
    ]
  }
}