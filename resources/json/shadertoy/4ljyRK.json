{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "4ljyRK",
      "date": "1509251994",
      "viewed": 336,
      "name": "Primes - Gaussian",
      "username": "iq",
      "description": "Gaussian primes: [url]http://mathworld.wolfram.com/GaussianPrime.html[/url]",
      "likes": 2,
      "published": 3,
      "flags": 0,
      "tags": [
        "2d",
        "gaussian",
        "prime",
        "primes"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "// Created by inigo quilez - iq/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Gaussian primes: http://mathworld.wolfram.com/GaussianPrime.html\n//\n// Regular primes: https://www.shadertoy.com/view/4slGRH\n\nbool isPrime( int x )\n{\n\tif( x==1 ) return false;\n\tif( x==2 ) return true;\n\tif( x==3 ) return true;\n\tif( x==5 ) return true;\n\tif( x==7 ) return true;\n\tif( (x&1)==0 ) return false;\n\tif( (x%3)==0 ) return false;\n\tif( (x%5)==0 ) return false;\n\n    int xm = 1 + int(sqrt(float(x)));\n    \n\tint y = 7;\n\tfor( int i=0; i<100; i++ ) // count up to 3000 (100*30). See  http://www.iquilezles.org/blog/?p=1558\n\t{\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 4;  if( y>=xm    ) return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 2;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 4;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 2;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 4;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 6;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 2;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 6;  if( y>=xm )    return true;\n\t}\n\t\n\treturn true;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float s = 5.0 + 4.0*cos(6.2831*iTime/10.0);\n    ivec2 p = ivec2( floor((fragCoord-iResolution.xy*0.5)/s) );\n    \n    p = abs(p);\n    \n    \n    bool isPr = false;\n    \n    if( p.x==0 ) \n    {\n        isPr = isPrime(p.y) && ((p.y&3)==3);\n    }\n    else if( p.y==0 ) \n    {\n        isPr = isPrime(p.x) && ((p.x&3)==3);\n    }\n    else\n    {\n        isPr = isPrime(p.x*p.x+p.y*p.y);\n    }\n    \n    if( p.x==1 && p.y==1 ) isPr = true;\n    \n    fragColor = vec4( isPr?vec3(0.5,1.0,0.0):vec3(0.0), 1.0 );\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}