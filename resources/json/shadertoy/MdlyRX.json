{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "MdlyRX",
      "date": "1489184002",
      "viewed": 309,
      "name": "bloom test",
      "username": "battlebottle",
      "description": "simple bloom effect with 2 passes",
      "likes": 3,
      "published": 3,
      "flags": 32,
      "tags": [
        "bloom"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 5,
            "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg",
            "ctype": "texture",
            "channel": 0,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 258,
            "src": "/media/previz/buffer01.png",
            "ctype": "buffer",
            "channel": 1,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 260,
            "src": "/media/previz/buffer03.png",
            "ctype": "buffer",
            "channel": 2,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "vec4 getColor(in vec2 coord) {\n    \n    return texture(iChannel0, vec2(coord.x + sin(iTime + coord.y / 20.0) * 3.0, coord.y + sin(iTime + coord.x / 20.0) * 3.0) / iResolution.xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n    \n    fragColor = ((getColor(fragCoord) / 2.0 + texture(iChannel1, uv) / 4.0 + texture(iChannel2, uv) / 8.0)) * (sin(iTime * 1.0) + 2.0);\n    \n}",
        "name": "Image",
        "description": "",
        "type": "image"
      },
      {
        "inputs": [
          {
            "id": 5,
            "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg",
            "ctype": "texture",
            "channel": 0,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 257,
            "channel": 0
          }
        ],
        "code": "vec4 getColor(in vec2 coord) {\n    \n    return texture(iChannel0, vec2(coord.x + sin(iTime + coord.y / 20.0) * 3.0, coord.y + sin(iTime + coord.x / 20.0) * 3.0) / iResolution.xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 col = texture(iChannel0, uv);\n    \n    \n    float blurSteps = 20.0;\n\n\tfor(float i = 0.0; i < blurSteps; i++){\n    \tcol += getColor(vec2(fragCoord.x - (blurSteps/2.0) + i, fragCoord.y));\n\t}\n    col /= blurSteps;\n    \n    fragColor = col * col ;\n}",
        "name": "Buf A",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 258,
            "channel": 0
          }
        ],
        "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 col = texture(iChannel0, uv);\n    \n    \n    float blurSteps = 20.0;\n\n\tfor(float i = 0.0; i < blurSteps; i++){\n    \tcol += texture(iChannel0, vec2(fragCoord.x, fragCoord.y - (blurSteps/2.0) + i) / iResolution.xy);\n\t}\n    col /= blurSteps;\n    \n    fragColor = col;\n}",
        "name": "Buf B",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [
          {
            "id": 258,
            "src": "/media/previz/buffer01.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 259,
            "channel": 0
          }
        ],
        "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 col = texture(iChannel0, uv);\n    \n    \n    float blurSteps = 20.0;\n\n\tfor(float i = 0.0; i < blurSteps; i++){\n    \tcol += texture(iChannel0, vec2(fragCoord.x - (blurSteps/2.0) + i, fragCoord.y) / iResolution.xy);\n\t}\n    col /= blurSteps;\n    \n    fragColor = col;\n}",
        "name": "Buf C",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [
          {
            "id": 259,
            "src": "/media/previz/buffer02.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 260,
            "channel": 0
          }
        ],
        "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 col = texture(iChannel0, uv);\n    \n    \n    float blurSteps = 20.0;\n\n\tfor(float i = 0.0; i < blurSteps; i++){\n    \tcol += texture(iChannel0, vec2(fragCoord.x, fragCoord.y - (blurSteps/2.0) + i) / iResolution.xy);\n\t}\n    col /= blurSteps;\n    \n    fragColor = col;\n}",
        "name": "Buf D",
        "description": "",
        "type": "buffer"
      }
    ]
  }
}