{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "4d3GWS",
      "date": "1451910472",
      "viewed": 920,
      "name": "Gray Scott Reaction Diffusion",
      "username": "Eybor",
      "description": "An implementation of Gray Scott Model of Reaction Diffusion using multipass shaders . When your display is resized you can use the space bar in order for the image to be resized too.",
      "likes": 18,
      "published": 3,
      "flags": 48,
      "tags": [
        "2d",
        "multipass"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n        \n\tfragColor = texture(iChannel0, uv);\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      },
      {
        "inputs": [
          {
            "id": 33,
            "src": "/presets/tex00.jpg",
            "ctype": "keyboard",
            "channel": 3,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 258,
            "src": "/media/previz/buffer01.png",
            "ctype": "buffer",
            "channel": 1,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 259,
            "src": "/media/previz/buffer02.png",
            "ctype": "buffer",
            "channel": 2,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 257,
            "channel": 0
          }
        ],
        "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(texture(iChannel0, vec2(0.)).w == 0. || texture(iChannel3,  vec2(0.126953125, .25)).x > 0.)\n   \t{\n        if(fragCoord.x > iResolution.x/4. && fragCoord.x < 3.*iResolution.x/4. &&\n           fragCoord.y > iResolution.y/4. && fragCoord.y < 3.*iResolution.y/4.)\n        {\n            fragColor.xyz = vec3(.5);\n        }\n        else\n        { \n            fragColor.xyz = vec3(1.);\n        }\n        fragColor.w = 1.; \n    }\n\telse\n    {\n        vec3 laplacian = vec3(   texture(iChannel0, (fragCoord-vec2(0., 1.))/iResolution.xy) +\n                         \t     texture(iChannel0, (fragCoord-vec2(1., 0.))/iResolution.xy) -\n                         \t  4.*texture(iChannel0, fragCoord/iResolution.xy) +\n            \t\t\t \t     texture(iChannel0, (fragCoord+vec2(1., 0.))/iResolution.xy) +\n            \t\t\t \t     texture(iChannel0, (fragCoord+vec2(0., 1.))/iResolution.xy));\n                \n        vec3 vu = texture(iChannel0, fragCoord/iResolution.xy).xyz;\n        vec3 vv = texture(iChannel1, fragCoord/iResolution.xy).xyz;\n        \n        vec4 params = texture(iChannel2, vec2(0.));\n        \n        fragColor.xyz = vu + params.z*laplacian+params.x*(1.-vu)-vu*vv*vv;\n    }\n}",
        "name": "Buf A",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [
          {
            "id": 33,
            "src": "/presets/tex00.jpg",
            "ctype": "keyboard",
            "channel": 3,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 258,
            "src": "/media/previz/buffer01.png",
            "ctype": "buffer",
            "channel": 1,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 259,
            "src": "/media/previz/buffer02.png",
            "ctype": "buffer",
            "channel": 2,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 258,
            "channel": 0
          }
        ],
        "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(texture(iChannel1, vec2(0.)).w == 0. || texture(iChannel3,  vec2(0.126953125, .25)).x > 0.)\n   \t{\n        if(fragCoord.x > iResolution.x/4. && fragCoord.x < 3.*iResolution.x/4. &&\n           fragCoord.y > iResolution.y/4. && fragCoord.y < 3.*iResolution.y/4.)\n        {\n            fragColor.xyz = vec3(.25);\n        }\n        else\n        {\n            fragColor.xyz = vec3(0.);\n        }\n        fragColor.w = 1.;\n    }\n    else\n    {\n        vec3 laplacian = vec3(   texture(iChannel1, (fragCoord-vec2(0., 1.))/iResolution.xy) +\n                         \t     texture(iChannel1, (fragCoord-vec2(1., 0.))/iResolution.xy) -\n                         \t  4.*texture(iChannel1, fragCoord/iResolution.xy) +\n            \t\t\t \t     texture(iChannel1, (fragCoord+vec2(1., 0.))/iResolution.xy) +\n            \t\t\t \t     texture(iChannel1, (fragCoord+vec2(0., 1.))/iResolution.xy));\n\n        vec3 vu = texture(iChannel0, fragCoord/iResolution.xy).xyz;\n        vec3 vv = texture(iChannel1, fragCoord/iResolution.xy).xyz;\n        \n        vec4 params = texture(iChannel2, vec2(0.));\n        \n        fragColor.xyz = vv + params.w*laplacian-(params.x+params.y)*vv+vu*vv*vv;\n    }\n}",
        "name": "Buf B",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [],
        "outputs": [
          {
            "id": 259,
            "channel": 0
          }
        ],
        "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(.04,.06,.2,.1);\n}",
        "name": "Buf C",
        "description": "",
        "type": "buffer"
      }
    ]
  }
}