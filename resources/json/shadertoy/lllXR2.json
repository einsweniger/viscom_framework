{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "lllXR2",
      "date": "1438226147",
      "viewed": 673,
      "name": "Raymarch 175 chars",
      "username": "GregRostami",
      "description": "I'm trying to shrink my previous shader: https://www.shadertoy.com/view/MtXXRH\nThis was inspired by coyote's [2TC 15] Fractal Complex shader: https://www.shadertoy.com/view/ltfGzS\nSize optimizing friends (addicts) ... please help! ",
      "likes": 11,
      "published": 3,
      "flags": 0,
      "tags": [
        "3d",
        "raymarch",
        "small",
        "2tc"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "/**/\n#define mainImage(o,u)\t\t\t\t\t\t\t\t\t\\\n    o.xy = u/iResolution.x;\t\t\t\t\t\t\t\t\\\n    vec4 r, q, p = o += .5;\t\t\t\t\t\t\t\t\\\n    q.z = iTime;\t\t\t\t\t\t\t\t\t\t\\\n    p--;\t\t\t\t\t\t\t\t\t\t\t\t\\\n    for (int i=0; i++<99;)\t\t\t\t\t\t\t\t\\\n    \tr = sin(q), r = max(r.y-r,.1*(cos(q*9.)-r.y)),\t\\\n     \t(o.a = max(r.x,r.z)) >.01\t\t\t\t\t\t\\\n        ? q -= p*o.a, o -= .01 : o\n/**/\n\n\n//Super Fabrice implemented several size optimizations\n//Plus further optimization by 834144373 brings it down to 196 chars!!\n//coyote reworked the loop code for -1 char.\n//Had to add 2 chars to make it work on all platforms. :(\n/**\nvoid mainImage(out vec4 o,vec2 u)\n{\n    o -= o;\n    o.xy = u/iResolution.x;\t\t\t// Red, Green & Yellow color gradient.\n    vec4 r, q,                        // Initialize 4D vector for geometry.            \n        p = o += .5;               // Set the camera to look straight ahead.\n    q.z = iTime;\t\t\t\t\t// Animate camera across the z-axis.\n    p--;                           // p = p - 1.0\n    for (int i=0; i++<99;)       // Main ray-marching loop.\n    \tr = sin(q), r = max(r.y-r,.1*(cos(q*9.)-r.y)), // 3D geometry (Menger Sponge).\n     \t(o.a = max(r.x,r.z)) >.01  // If the ray misses,\n        ? q -= p*o.a,              // then march the ray forward and\n        o -= .01                   // darken distant pixels (shading).\n        : o;                       // else, ray hit the geometry. Output color. \n}\n/**/\n\n// 203 chars - uses iTime for better rendering.\n/**\nvoid mainImage (out vec4 o,vec2 u)\n{\n    o = vec4(u/iResolution.x,0,0);\n    vec4 r, q, p=o+=.5;\n    q.z = iTime;\n    p--;\n    for (int i=0; i++<99;)  \n    \tr = sin(q),\n        r = max(r.y-r,.1*(cos(q*9.)-r.y)),\n     \t(o.a=max(r.x,r.z)) >.01 ? q -= p*o.a, o -= .01 : o;\n}\n/**/\n\n\n//Original Shader at 227 chars:\n/**\n#define X r = cos(q.xyww*s), d = max(d,(cos(q.y)-min(r.x,min(r.y,r.z)))/s),s*=8.;\nvoid mainImage(out vec4 o, vec2 n )\n{\n    vec4 r,q=iDate,p=q-q-.4;\n    p.xy+=n/iResolution.x;\n    for (float i=1.; i>0.; i-=.01)\n    {\n        float d=0.,s=1.;\n\t\tX X\n        d>.01 ?\n        q -= p*d,\n        o = p+i\n        : o;\n    }\n}\n/**/",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}