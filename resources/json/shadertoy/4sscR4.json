{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "4sscR4",
      "date": "1491159438",
      "viewed": 238,
      "name": "[ #08 ] - Ancient scroll",
      "username": "Yrai",
      "description": ":)",
      "likes": 3,
      "published": 3,
      "flags": 0,
      "tags": [
        "2d",
        "text",
        "texture",
        "boltzman"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 49,
            "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png",
            "ctype": "texture",
            "channel": 0,
            "sampler": {
              "filter": "mipmap",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define res_            iResolution\n#define time_           iTime\n\nvec2  domain(vec2 uv, float s);\nfloat rand(float x);\nfloat triangle(float x);\nfloat char(vec2 p, int C);\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n\tvec2 p = domain(fragCoord, 2.);\n\t\n    float size = 1.;\n    float squared = max(abs(p.x), abs(p.y)) - size;\n    \n    float t = 10.*sin(.3*time_);\n    float deformation = .02*cos(t*atan(p.x, p.y));\n    squared += deformation;\n   \t\n    float hatch = sin(triangle(4.*p.x)*11.)*rand(p.x)*rand(p.y) + \n                  triangle(4.*p.y)*1.*rand(p.y);\n    \n    vec3 c  = vec3(0.);\n    vec3 edge_color = vec3(39., 20., 0.) / 255.;\n    vec3 surface_color = vec3(199., 176., 145.) / 255.;\n    vec3 bg = mix(surface_color, surface_color*5., deformation*hatch);\n    \n   \tc += edge_color * smoothstep(.019, .001, abs(squared));\n    c += bg * smoothstep(.02, .01, squared);\n    c = mix(c, bg*1.4, 2.-length(p)-.1);\n    \n    p += vec2(.6, .15);\n    c = mix(c, vec3(0.), char((p*3.), 83));\n    \n    c = mix(c, vec3(0.), char((p*3.) - vec2(.5, 0.), 61));\n    c = mix(c, vec3(0.), char((p*3.) - vec2(1., 0.), 107));\n    c = mix(c, vec3(0.), char((p*3.) - vec2(1.5, 0.), 108));\n    c = mix(c, vec3(0.), char((p*3.) - vec2(2., 0.), 111));\n    c = mix(c, vec3(0.), char((p*3.) - vec2(2.5, 0.), 103));\n    c = mix(c, vec3(0.), char((p*3.) - vec2(3., 0.), 87));\n    \n    fragColor = vec4(c, 1.);\n}\n\nfloat char(vec2 p, int C) {\n  if (p.x<0.|| p.x>1. || p.y<0.|| p.y>1.) return 0.;\n   \n  return textureGrad(\n      iChannel0, p/16. + fract(vec2(C, 15-C/16) / 16.), \n      dFdx(p/16.),dFdy(p/16.)\n  ).r;\n}\n\nvec2 domain(vec2 uv, float s) {\n    return (2.*uv.xy-res_.xy) / res_.y*s;\n}\n\nfloat rand(float x) {\n    return fract(sin(x) * 43758.5453);\n}\n\nfloat triangle(float x) {\n\treturn abs(1.0 - mod(abs(x), 2.0)) * 2.0 - 1.0;\n}\n",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}