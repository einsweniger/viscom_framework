{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "4sS3Wc",
      "date": "1394107125",
      "viewed": 344,
      "name": "Hermite",
      "username": "Zavie",
      "description": "Playing with Hermite interpolation. I was looking for a way to distort a 2D space while keeping monotonicity. This is a Hermite based one.",
      "likes": 11,
      "published": 3,
      "flags": 0,
      "tags": [
        "spline",
        "interpolation",
        "hermite"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 5,
            "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg",
            "ctype": "texture",
            "channel": 0,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "false",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [],
        "code": "/*\n\nThis shader distorts a 2D space while maintaining\nmonotonicity, by using Hermite interpolation with\nfactors up to 3.\n\nThanks to Reedbeta for the suggestion.\n\n--\nZavie\n\n*/\n\nfloat h00(float x) { return 2.*x*x*x - 3.*x*x + 1.; }\nfloat h10(float x) { return x*x*x - 2.*x*x + x; }\nfloat h01(float x) { return 3.*x*x - 2.*x*x*x; }\nfloat h11(float x) { return x*x*x - x*x; }\n\nfloat Hermite(float p0, float p1, float m0, float m1, float x)\n{\n\treturn p0*h00(x) + m0*h10(x) + p1*h01(x) + m1*h11(x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n\tfloat a = sin(iTime * 1.0)*0.5 + 0.5;\n\tfloat b = sin(iTime * 1.5)*0.5 + 0.5;\n\tfloat c = sin(iTime * 2.0)*0.5 + 0.5;\n\tfloat d = sin(iTime * 2.5)*0.5 + 0.5;\n\t\n\tfloat y0 = mix(a, b, uv.x);\n\tfloat y1 = mix(c, d, uv.x);\n\tfloat x0 = mix(a, c, uv.y);\n\tfloat x1 = mix(b, d, uv.y);\n\n\tuv.x = Hermite(0., 1., 3.*x0, 3.*x1, uv.x);\n\tuv.y = Hermite(0., 1., 3.*y0, 3.*y1, uv.y);\n\n\t\n\tvec3 color = texture(iChannel0, vec2(uv.x, 1. - uv.y)).xyz;\n\tvec2 grid = fract(0.05*iResolution.xy*uv);\n\tfragColor = vec4(mix(0.8, 1., 0.5*(grid.x + grid.y))*color,1.0);\n}\n",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}