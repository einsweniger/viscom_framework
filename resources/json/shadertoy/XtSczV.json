{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "XtSczV",
      "date": "1509144777",
      "viewed": 343,
      "name": "Rotational symmetry",
      "username": "iq",
      "description": "Rotational symmetry with regular mod() domain repetition. Since the repeated objects extend past half the repeating space, the one extra neighbor needs to be checked for distance too. This can be done cheaply without extra trigonometry (line 46).",
      "likes": 12,
      "published": 3,
      "flags": 0,
      "tags": [
        "2d",
        "sdf",
        "symmetry",
        "rotational"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "// The MIT License\n// Copyright \u00a9 2017 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Rotational symmetry with regular mod() domain repetition. Since the repeated objects extend \n// past half the repeating space, one extra neighbor need to be checked for distance too. This\n// can be done cheaply without extra trigonometry (line 46).\n//    \n// Idea from aiekick's https://www.shadertoy.com/view/XtBcRV but with fixed discontinuities at\n// minimal cost, and euclidean distance\n\n\nconst int n = 8;\nconst float an = 6.2831/float(n);\nconst mat2 inc = mat2( cos(an),sin(an),-sin(an),cos(an)); // can replace by constants\n//const mat2 inc = mat2(1.0,1.0,-1.0,1.0)/1.41421; // same as above for n=8\n\n//#define SIMULATE_BUG\n#define BOX_SIZE 0.5\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = (fragCoord*2.-iResolution.xy)/iResolution.y*3.;\n\n    float fa = (atan(q.y,q.x)+an*0.5)/an;\n    float ia = floor( fa );\n    \n    float sym = an*ia;\n    vec2 r = mat2(cos(sym),-sin(sym),\n                  sin(sym), cos(sym))*q;\n        \n    #ifndef SIMULATE_BUG\n    if( fract(fa)>0.5 ) r = r*inc; // rotate one backwards\n    #endif\n\n    float d = 4.0 + length(q);\n    #ifndef SIMULATE_BUG\n    for( int i=0; i<2; i++ )\n    #endif\n    {\n                                            // int id = (int(ia)-i) % n; or float id = mod(ia-float(i),float(n));\n        float rot = iTime;                  // + 2.0*float(id); // try this for different angles\n        \n        // translate and rotate each box\n        vec2 p = mat2( cos(rot),sin(rot),\n                      -sin(rot),cos(rot))*(r - vec2(2.0,0.0));\n\n        // box distance\n        p = abs(p) - BOX_SIZE;                   // + 0.4*sin(3.0*float(id)); // try this for different size\n        d = min( d, min(max(p.x,p.y),0.0) + length(max(p,0.0)) );\n        \n        // next angle\n        r = inc*r;\n\t}\n    \n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(120.0*abs(d));\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d)) );\n\n\tfragColor = vec4( col, 1.0 );;\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}