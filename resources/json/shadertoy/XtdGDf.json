{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "XtdGDf",
      "date": "1472127126",
      "viewed": 246,
      "name": "WAVES",
      "username": "Imsure1200q_1UWE130",
      "description": "more like fir",
      "likes": 0,
      "published": 3,
      "flags": 0,
      "tags": [
        "waves"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 6,
            "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg",
            "ctype": "texture",
            "channel": 1,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 30,
            "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png",
            "ctype": "texture",
            "channel": 0,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "float pi = acos(0.)*2.;\nvec3 b( vec2 p, float s )\n{\n    vec2 x = smoothstep(vec2(s), p/2.0, p/5.0);\n    vec3 q = normalize(vec3(x, 1.0));\n    vec3 i = vec3(x, q.z/q.x);\n    float k = length(sqrt(s));\n    return abs(sin(q-i*k)) - clamp(q.x, q.z, s/k);\n}\nvec2 i( vec2 p, float s, float s2 )\n{\n    float x = smoothstep(float(p), s, s2/s);\n    vec2 q = p / x * distance(s, s2);\n    vec3 pos = b(p, s);\n    float pSep = max(min(pos.x, pos.z), min(pos.y, pos.z));\n    return q + pSep * -(iTime / 2.0) / pos.xy;\n}\nfloat s( float u ) {\n    \n    float sum = 0.;\n    \n    for( float i = 1.; i < u; i++) {\n        \n        sum += 1. / pow(float(2.), float(i));\n        \n    }\n    \n    return sum;\n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    if(uv.y >= 0.3/length(texture(iChannel0, i(uv, 2.0, 3.0)))){\n        fragColor = vec4(cos(uv.y)) + vec4(-0.025, 0.025, 0.6, 0.5) - vec4(0.8);\n        fragColor += texture(iChannel1, vec2(uv.x * 1.01 - (iTime / 60.0), uv.y* 5.0) )  - 0.8 + 0.4;\n    }\n    else fragColor = vec4(sin(uv.y)) + vec4(0.9, 0.5, 0.025, 0.5) - vec4(0.1) + sin(iTime)/32. + 1./32.;\n    \n    fragColor *= sin(min(iTime/2.,pi/2.));\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}