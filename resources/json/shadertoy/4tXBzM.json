{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "4tXBzM",
      "date": "1511280423",
      "viewed": 78,
      "name": "(no-signal) TV noise",
      "username": "Otringal",
      "description": "A simple emulation of a \"no-signal\" TV noise.",
      "likes": 0,
      "published": 3,
      "flags": 0,
      "tags": [
        "noise",
        "tv",
        "no",
        "channel",
        "signal",
        "radio",
        "antenna"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 29,
            "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv",
            "ctype": "video",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "vec2 getUVCoords(in vec2 fragCoords)\n{\n    vec2 standardUVs = (fragCoords - 0.5) / (iResolution.xy - 1.0);\n    return standardUVs;\n}\n\nfloat getRandomValue(vec2 uvCoords)\n{\n    return fract(sin(fract(iTime) / 10.0 * dot(uvCoords, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = getUVCoords(fragCoord);\n    vec4 image = texture(iChannel0, uv);\n    \n    fragColor = getRandomValue(uv) + 0.2 * image;\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}