{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "ldSyzV",
      "date": "1492799555",
      "viewed": 661,
      "name": "Dotted Drawing / Sketch Effect",
      "username": "starea",
      "description": "A one-pass shader for dotted drawing / sketch post processing effect. \nPress the mouse for a slower but more classic sketching effect, though I prefer the dotted version.\nShader forked and related ones are listed in the code.",
      "likes": 13,
      "published": 3,
      "flags": 0,
      "tags": [
        "2d",
        "postprocessing",
        "video",
        "mipmap",
        "sketch",
        "dots",
        "draw",
        "pencil",
        "drawing",
        "hand",
        "artistic",
        "notebook"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 36,
            "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm",
            "ctype": "video",
            "channel": 0,
            "sampler": {
              "filter": "mipmap",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "/** \n * Sketch Effect by Ruofei Du (DuRuofei.com)\n * Link to demo: https://www.shadertoy.com/view/ldSyzV\n * starea @ ShaderToy, License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. \n *\n * A one-pass shader for dotted drawing / sketch post processing effect. \n * Press the mouse for a slower but more classic sketching effect, though I prefer the dotted version.\n * Shader forked and related ones are listed below.\n * Works better with video mipmaping.\n *\n * Reference: \n * [1] Pencil vs Camera. http://www.duruofei.com/Research/pencilvscamera\n *\n * Forked or related:\n * [1] Pol's Photoshop Blends Branchless: https://www.shadertoy.com/view/Md3GzX\n * [2] Gaussian Blur: https://www.shadertoy.com/view/ltBXRh\n * [3] williammalo2's Blur with only one pixel read: https://www.shadertoy.com/view/XtGGzz\n * [3] demofox's greyscale: https://www.shadertoy.com/view/XdXSzX \n * [4] iq's Postprocessing: https://www.shadertoy.com/view/4dfGzn\n *\n * Related masterpieces:\n * [1] flockaroo's Notebook Drawings: https://www.shadertoy.com/view/XtVGD1\n * [2] HLorenzi's Hand-drawn sketch: https://www.shadertoy.com/view/MsSGD1 \n **/\nconst float PI = 3.1415926536;\nconst float PI2 = PI * 2.0; \nconst int mSize = 9;\nconst int kSize = (mSize-1)/2;\nconst float sigma = 3.0;\nfloat kernel[mSize];\n\nfloat normpdf(in float x, in float sigma) \n{\n\treturn 0.39894 * exp(-0.5 * x * x / (sigma * sigma)) / sigma;\n}\n\nvec3 colorDodge(in vec3 src, in vec3 dst)\n{\n    return step(0.0, dst) * mix(min(vec3(1.0), dst/ (1.0 - src)), vec3(1.0), step(1.0, src)); \n}\n\nfloat greyScale(in vec3 col) \n{\n    return dot(col, vec3(0.3, 0.59, 0.11));\n    //return dot(col, vec3(0.2126, 0.7152, 0.0722)); //sRGB\n}\n\nvec2 random(vec2 p){\n\tp = fract(p * vec2(443.897, 441.423));\n    p += dot(p, p.yx+19.19);\n    return fract((p.xx+p.yx)*p.xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec3 col = texture(iChannel0, q).rgb;\n   \n    vec2 r = random(q);\n    r.x *= PI2;\n    vec2 cr = vec2(sin(r.x),cos(r.x))*sqrt(r.y);\n    \n    vec3 blurred = texture(iChannel0, q + cr * (vec2(mSize) / iResolution.xy) ).rgb;\n    \n    if (iMouse.z > 0.5) {\n        blurred = vec3(0.0); \n        float Z = 0.0;\n        for (int j = 0; j <= kSize; ++j) {\n            kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n        }\n\n        for (int j = 0; j < mSize; ++j) {\n            Z += kernel[j];\n        }\n\n        for (int i = -kSize; i <= kSize; ++i) {\n            for (int j = -kSize; j <= kSize; ++j) {\n                blurred += kernel[kSize+j]*kernel[kSize+i]*texture(iChannel0, (fragCoord.xy+vec2(float(i),float(j))) / iResolution.xy).rgb;\n            }\n    \t}\n   \t\tblurred = blurred / Z / Z;\n    }\n    \n    vec3 inv = vec3(1.0) - blurred; \n    // color dodge\n    vec3 lighten = colorDodge(col, inv);\n    // grey scale\n    vec3 res = vec3(greyScale(lighten));\n    \n    // more contrast\n    res = vec3(pow(res.x, 3.0)); \n    //res = clamp(res * 0.7 + 0.3 * res * res * 1.2, 0.0, 1.0);\n    \n    // edge effect\n    if (iMouse.z > 0.5) res *= 0.25 + 0.75 * pow( 16.0 * q.x * q.y * (1.0 - q.x) * (1.0 - q.y), 0.15 );\n\tfragColor = vec4(res, 1.0); \n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}