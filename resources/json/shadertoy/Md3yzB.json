{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "Md3yzB",
      "date": "1519421675",
      "viewed": 219,
      "name": "Simple Gradient descent",
      "username": "Txoka",
      "description": "gradient descent\nprint value from: https://www.shadertoy.com/view/4sBSWW",
      "likes": 0,
      "published": 3,
      "flags": 32,
      "tags": [
        "descent",
        "dradient"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = texture(iChannel0,uv);\n\t\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      },
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 257,
            "channel": 0
          }
        ],
        "code": "#define zoom 2.\n#define descendInit 0.\n//#define descendSpeed 1.\n#define descendSpeed 20.\n\n\n#define S(v) smoothstep(pixels,0.,v)\nfloat f(float x,vec2 m){\n\treturn cos(x-m.x)+m.y;\n}\n/*float f(float x,vec2 m){\n\treturn -pow(x,1./x);\n}*/\n\n//n -> e\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord/iResolution.xy*2.-1.;\n\tuv.x*=iResolution.x/iResolution.y;\n    uv*=zoom;\n\tvec2 mouse = iMouse.xy/iResolution.xy*2.-1.;\n\tmouse.x*=iResolution.x/iResolution.y;\n\tmouse*=zoom;\n    \n\tfloat n=texture(iChannel0,vec2(0)).r;\n\tn-=(f(n+0.01,mouse)-f(n-0.01,mouse))*(descendSpeed);\n    \n\tif(iTime<1.)n=(descendInit);\n\t\n    float pixels=2./iResolution.y*(zoom);\n    vec3 col = vec3(0,0,1)*smoothstep(pixels,0.,abs(f(uv.x,mouse)-uv.y));\n\n    col+=smoothstep(pixels,0.,abs(uv.x-n))*vec3(1,0,0);\n    col+=0.3*smoothstep(pixels,0.,abs(uv.x));\n    col+=0.3*smoothstep(pixels,0.,abs(uv.y));\n\tcol+=0.2*smoothstep(pixels,0.,abs(fract(abs(uv.x)-0.5)-0.5));\n    col+=0.2*smoothstep(pixels,0.,abs(fract(abs(uv.y)-0.5)-0.5));\n    col+=0.1*smoothstep(pixels,0.,abs(fract(abs(uv.x)*10.-0.5)-0.5)/10.);\n    col+=0.1*smoothstep(pixels,0.,abs(fract(abs(uv.y)*10.-0.5)-0.5)/10.);\n\t\n    fragColor = vec4(col,1.0);\n    fragColor+=PrintValue(uv,vec2(n,0.9*(zoom)),vec2(0.06)*(zoom),abs(n),2.,6.);\n\t\n\tfragColor.r=distance(fragCoord,vec2(0))<1.?n:fragColor.r;\n}",
        "name": "Buf A",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [],
        "outputs": [],
        "code": "float DigitBin( const int x )\n{\n    return x==0?480599.0:x==1?139810.0:x==2?476951.0:x==3?476999.0:x==4?350020.0:x==5?464711.0:x==6?464727.0:x==7?476228.0:x==8?481111.0:x==9?481095.0:0.0;\n}\n\nfloat PrintValue( const vec2 vStringCoords, const float fValue, const float fMaxDigits, const float fDecimalPlaces )\n{\n    if ((vStringCoords.y < 0.0) || (vStringCoords.y >= 1.0)) return 0.0;\n\tfloat fLog10Value = log2(abs(fValue)) / log2(10.0);\n\tfloat fBiggestIndex = max(floor(fLog10Value), 0.0);\n\tfloat fDigitIndex = fMaxDigits - floor(vStringCoords.x);\n\tfloat fCharBin = 0.0;\n\tif(fDigitIndex > (-fDecimalPlaces - 1.01)) {\n\t\tif(fDigitIndex > fBiggestIndex) {\n\t\t\tif((fValue < 0.0) && (fDigitIndex < (fBiggestIndex+1.5))) fCharBin = 1792.0;\n\t\t} else {\t\t\n\t\t\tif(fDigitIndex == -1.0) {\n\t\t\t\tif(fDecimalPlaces > 0.0) fCharBin = 2.0;\n\t\t\t} else {\n                float fReducedRangeValue = fValue;\n                if(fDigitIndex < 0.0) { fReducedRangeValue = fract( fValue ); fDigitIndex += 1.0; }\n\t\t\t\tfloat fDigitValue = (abs(fReducedRangeValue / (pow(10.0, fDigitIndex))));\n                fCharBin = DigitBin(int(floor(mod(fDigitValue, 10.0))));\n\t\t\t}\n        }\n\t}\n    return floor(mod((fCharBin / pow(2.0, floor(fract(vStringCoords.x) * 4.0) + (floor(vStringCoords.y * 5.0) * 4.0))), 2.0));\n}\n\n\nfloat PrintValue(const in vec2 fragCoord, const in vec2 vPixelCoords, const in vec2 vFontSize, const in float fValue, const in float fMaxDigits, const in float fDecimalPlaces)\n{\n    vec2 vStringCharCoords = (fragCoord.xy - vPixelCoords) / vFontSize;\n    \n    return PrintValue( vStringCharCoords, fValue, fMaxDigits, fDecimalPlaces );\n}\n\n//https://www.shadertoy.com/view/4sBSWW\n",
        "name": "Common",
        "description": "",
        "type": "common"
      }
    ]
  }
}