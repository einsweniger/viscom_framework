{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "4lXBWr",
      "date": "1511557442",
      "viewed": 243,
      "name": "Random walk",
      "username": "qwertsol",
      "description": "Particle random walk. \nUse mouse to add bias to particle movement direction.",
      "likes": 5,
      "published": 3,
      "flags": 32,
      "tags": [
        "simulation",
        "randomwalk"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 258,
            "src": "/media/previz/buffer01.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      },
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 257,
            "channel": 0
          }
        ],
        "code": "#define N_WALKERS 200\n\nconst float step_size = 0.01;\n\nivec2 indexToCoords( int i, float xResolution )\n{\n    int ixResolution = int(xResolution);\n    int x = i % ixResolution;\n    int y = i / ixResolution;\n    \n    return ivec2(x, y);\n}\n\nint coordsToIndex( vec2 coords, float xResolution )\n{\n    return int((coords.y - 0.5) * xResolution + (coords.x - 0.5));\n}\n\nfloat rand( vec2 co )\n{\n    return fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec2 rand2( vec2 co )\n{\n    float v0 = rand(co);\n    float v1 = rand(vec2(co.y, v0));\n    \n    return vec2(v0, v1);\n}\n\nvec3 rand3( vec2 co )\n{\n    float v0 = rand(co);\n    float v1 = rand(vec2(co.y, v0));\n    float v2 = rand(vec2(co.x, v1));\n    \n    return vec3(v0, v1, v2);\n}\n\nvec4 getParticlePositionAndDirection( int index )\n{\n    return texelFetch(iChannel0, indexToCoords(index, iChannelResolution[0].x), 0);\n}\n\nvec2 getLastResolution()\n{\n    return texelFetch(iChannel0, indexToCoords(N_WALKERS * 2, iChannelResolution[0].x), 0).rg;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \tvec2 muv = vec2(0.0);\n    if (iMouse.z > 0.0) \n    {\n    \tmuv = iMouse.xy / iResolution.xy;\n        muv -= vec2(.5);\n    }\n            \n\tint i = coordsToIndex(fragCoord, iResolution.x);\n    \n    if (iFrame == 0) \n    {\n        // Initialisation \n        if (i < N_WALKERS) \n        {\n            // Walker position and direction\n            vec2 pos = (rand2(fragCoord / iResolution.xy) - vec2(.5)) * 1.3;\n            vec2 dir = normalize(rand(pos) - vec2(.5));\n            fragColor = vec4(pos, dir);\n        }\n        else if (i >= N_WALKERS && i < N_WALKERS * 2) \n        {\n            // Walker color\n            fragColor = vec4(rand3(fragCoord), 1.0);\n        }\n    }\n    else\n    {\n        // Simulation\n        fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n        \n        if (i < N_WALKERS) \n        {\n            // Walker position and direction\n            vec4 data = getParticlePositionAndDirection(i);\n            vec2 pos = data.xy + data.zw * step_size;\n            vec2 dir = normalize(rand2(fragCoord * iTime) - vec2(.5) + muv * .5);\n            fragColor = vec4(pos, dir);\n        }\n    }\n   \n    if (i >= N_WALKERS * 2)\n    {\n        if (i >= N_WALKERS * 2 + 1 && i < N_WALKERS * 2 + 2)\n        {\n            // Flag resolution change\n            if (getLastResolution() != iResolution.xy) \n            {\n        \t\tfragColor = vec4(1.0);\n            }\n            else\n            {\n                fragColor = vec4(0.0);\n            }\n        }\n        \n        if (i < N_WALKERS * 2 + 1)\n        {\n            // Save last resolution\n        \tfragColor = vec4(iResolution, 0.0);\n        }\n    }\n}",
        "name": "Buf A",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 258,
            "src": "/media/previz/buffer01.png",
            "ctype": "buffer",
            "channel": 1,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 258,
            "channel": 0
          }
        ],
        "code": "#define N_WALKERS 200\n\nconst float radius = 0.005;\nconst float fadeout = 0.9975;\n\nivec2 indexToCoords( int i, float xResolution )\n{\n    int ixResolution = int(xResolution);\n    int x = i % ixResolution;\n    int y = i / ixResolution;\n    \n    return ivec2(x, y);\n}\n\nvec4 getParticlePositionAndDirection( int index )\n{\n    return texelFetch(iChannel0, indexToCoords(index, iChannelResolution[0].x), 0);\n}\n\nvec3 getParticleColor( int index )\n{\n    return texelFetch(iChannel0, indexToCoords(N_WALKERS + index, iChannelResolution[0].y), 0).rgb;\n}\n\nbool resolutionChanged()\n{\n    return texelFetch(iChannel0, indexToCoords(N_WALKERS * 2 + 1, iChannelResolution[0].y), 0).r > 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iChannelResolution[1].xy;\n    \n    fragColor = texture(iChannel1, uv) * fadeout;\n  \n    if (resolutionChanged()) \n    {\n        fragColor = vec4(0.0);\n    }\n    \n    uv -= vec2(.5);\n    uv *= 2.0;\n    uv.y *= iChannelResolution[1].y / iChannelResolution[1].x;\n    \n    for (int i=0; i<N_WALKERS; i++)\n    {\n        float d = distance(getParticlePositionAndDirection(i).xy, uv);\n        fragColor.rgb += smoothstep(0.0, radius, radius - d) * getParticleColor(i);\n    }\n    \n    fragColor = vec4(clamp(fragColor, 0.0, 1.0).rgb, 1.0);\n}",
        "name": "Buf B",
        "description": "",
        "type": "buffer"
      }
    ]
  }
}