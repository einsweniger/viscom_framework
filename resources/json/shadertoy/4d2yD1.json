{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "4d2yD1",
      "date": "1491924223",
      "viewed": 294,
      "name": "sierpinski raycasting",
      "username": "abje",
      "description": "raycasts a sierpinski carpet, use mouse",
      "likes": 7,
      "published": 3,
      "flags": 0,
      "tags": [
        "2d",
        "fractal",
        "squares"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "bool map(vec2 p) {\n    p = mod(p,3.0);\n    \n    //return dot(p-1.0,p-1.0) >= 1.1;\n    return dot(p-0.8,p-0.8) < 1.6;\n    //return dot(p-1.0,p-1.0) > 0.9;\n}\n#define steps 100\n#define detail 3\n\nfloat line( vec2 p, vec2 a, vec2 b ) \n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nbool isinbox(vec2 a, vec2 b, float size) {\n    return all(greaterThan(a, b))&&all(lessThan(a,b+size));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 scrpos = uv*3.0;\n    vec4 muv= (abs(iMouse) * 2.0 - iResolution.xyxy) / iResolution.y;\n    if (muv.y < -0.9) {\n        muv = vec4(sin(iTime), cos(iTime),0.0,0.0)+0.5;\n    }\n    vec2 pos = scrpos;\n    vec2 floorpos = floor(pos);\n    \n    \n    int c;\n    fragColor = vec4(1.0,0.0,0.0,1.0);\n    for (c = 0; c <= detail; c++) {\n        if (map(floorpos)) {\n\t\t\tfragColor = vec4(0.0,0.0,c,1.0)/2.0;\n            break;\n        }\n        pos = pos*3.0;\n        floorpos = floor(pos);\n    }\n    float white = 0.0;\n    vec2 cam = (muv.zw) * 3.0;\n    pos = cam;\n    vec2 dir = normalize(-(muv.zw)+(muv.xy));\n    float stepsize = 1.0;\n    float count = 0.0;\n    \n    floorpos = floor(pos/stepsize)*stepsize;\n    vec2 mask = vec2(0.0);\n    \n    float dist = 0.0;\n    vec2 localpos = pos;\n    vec2 localfloor = floorpos;\n    \n    vec2 poscolor = vec2(0.0);\n    for (int i = 0; i < steps; i++) {\n        if (count > float(detail)||dist > 12.0) break;\n        bool len = map(localfloor);\n        \n        if((max(localfloor.x,localfloor.y) > 2.5||min(localfloor.x,localfloor.y) < -0.5)) {\n            if (count < 0.5) {\n                localpos = localpos-(localfloor-mod(localfloor,3.0));\n                localfloor = mod(localfloor,3.0);\n            } else {\n                stepsize *= 3.0;\n                count--;\n                floorpos -= localfloor*stepsize/3.0-mask*sign(dir)*stepsize;\n                pos+= sign(dir)*0.001*mask;\n                localpos = mod(pos/stepsize-mask*sign(dir),3.0)+mask*sign(dir);\n\n                localfloor = floor(localpos);\n                \n            }\n\t\t} else\n        if (!len && count <= float(detail)) {            \n            stepsize /= 3.0;\n            count++;\n            localpos = localpos*3.0-localfloor*3.0;\n            vec2 pos2d = floor(localpos)*(1.0-mask)+mask*(-sign(dir)+1.0);\n            localfloor = floor(localpos);\n            localfloor = pos2d;\n            floorpos += localfloor*stepsize;\n            i--;\n        } else {\n        \t\n            //coloring\n            if(isinbox(scrpos,floorpos,stepsize)) {\n                fragColor = 0.8-fragColor;\n                poscolor = localfloor;\n            }\n            \n            vec2 dists = abs((sign(dir)*0.5+0.5)-(localpos-localfloor))*1.0/abs(dir);\n\t\t\t\n            float m = min(dists.x,dists.y);\n\t\t\t\n            mask = step(dists,vec2(m));\n\t\t\t\n            dist += m*stepsize;\n            pos += m*dir*stepsize;\n            localpos += m*dir;\n            localfloor += mask*sign(dir);\n            floorpos += mask*sign(dir)*stepsize;\n            \n            white = max(white, (1.0-abs(length(pos-uv*3.0)*20.0-0.5)));\n            \n            \n        }\n    }\n    \n    white = max(white, (1.0-20.0*line(uv*3.0,cam,pos)));\n    fragColor = max(fragColor,vec4(white));\n    \n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}