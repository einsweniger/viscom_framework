{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "4tKSDd",
      "date": "1486522098",
      "viewed": 397,
      "name": "T-Dog in da house!",
      "username": "daltostronic",
      "description": "Code might not be of the finest. I was just playing around. Kudos to Jukio for a great track!\n\nYou can control some parameters: click and drag your mouse. X axis controls time scale and Y axis controls dot sizes. These will be saved until restart.",
      "likes": 8,
      "published": 3,
      "flags": 96,
      "tags": [
        "metaballs",
        "lissajous",
        "multipass",
        "beatdetection"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 258,
            "src": "/media/previz/buffer01.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      },
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 7152,
            "src": "https://soundcloud.com/jukiokallio/blaztic-t-dog-in-the-house",
            "ctype": "musicstream",
            "channel": 1,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 0
          }
        ],
        "outputs": [
          {
            "id": 257,
            "channel": 0
          }
        ],
        "code": "// inspired by https://www.shadertoy.com/view/MddGzf & https://www.shadertoy.com/view/XlySDR & https://www.shadertoy.com/view/MlGGDK\n\n#define POINTCOUNT 50\n\nfloat isInside(vec2 p, vec2 c) { vec2 d = abs(p - 0.5 - c) - 0.5; return -max(d.x, d.y); }\n\nvec4 load(in float id)\n{\n    vec2 re = vec2(id, .0);\n    return texture(iChannel0, (0.5 + re) / iChannelResolution[0].xy, -100.0);\n}\nvoid storeValue(in float id, in vec4 va, inout vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 re = vec2(id, .0);\n    fragColor = (isInside(fragCoord, re) > 0.0) ? va : fragColor;\n}\nvec4 loadArray(in float id, in int i)\n{\n    vec2 re = vec2(id + float(i), .0);\n    return texture(iChannel0, (0.5 + re) / iChannelResolution[0].xy, -100.0);\n}\nvoid storeArray(in float id, in vec4[POINTCOUNT] va, inout vec4 fragColor, in vec2 fragCoord)\n{\n    for (int i = 0; i < POINTCOUNT; ++i)\n    {\n        vec2 re = vec2(id + float(i), .0);\n        fragColor = (isInside(fragCoord, re) > 0.0) ? va[i] : fragColor;\n    }\n}\n\nfloat bass()\n{\n    return log2(.5+texture(iChannel1, vec2(1./iChannelResolution[1].x,0)).x);\n}\n\nfloat treble()\n{\n    return texture(iChannel1, vec2(0.0)).x*2.0-1.0;\n}\n\n#define store(id, v) storeValue(id, v, fragColor, fragCoord)\n#define storeArr(id, v) storeArray(id, v, fragColor, fragCoord)\n#define loadArr(id, i) loadArray(id, i)\n\n#define txbass 0.0\n#define txtreble 1.0\n#define txparams 2.0\n#define txpoints 100.0\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    store(txtreble, vec4(treble()));\n    store(txbass, vec4(bass()));\n    \n    vec4 tp = load(txparams);\n    vec2 rf = iResolution.xy / vec2(16.0, 9.0);\n    store(txparams, vec4(iMouse.z > 0.0 ? (floor(iMouse.xy / rf) * rf + rf) / iResolution.xy : (tp.z > 0.0 ? tp.xy : vec2(1.0)), 1.0, 0.0));\n    vec2 p = load(txparams).xy;\n    \n    float t = iTime * 0.01 * mix(0.1, 1.0, p.x);\n    vec2 screen = iResolution.xy * 0.5 + 0.5;\n    \n    vec4 ps[POINTCOUNT];\n    for (int i = 0; i < POINTCOUNT; ++i)\n    {\n        float id = float(i + 1) * 3.0;\n        vec4 v = loadArr(txpoints, i);\n        ps[i] = v;\n        vec4 desired = vec4(treble() * 2.0 * sin(id * 3.1 * fract(t) + t * treble()), treble() * 2.0 * cos(id * 6.0 * sin(t) + t * treble()), 0.0, 0.0);\n        ps[i].xy = mix(v.xy, desired.xy, 0.1);\n    }\n    storeArr(txpoints, ps);\n    \n    if (isInside(fragCoord, vec2(txpoints + float(POINTCOUNT) + 1.0)) > 0.0) discard;\n}",
        "name": "Buf A",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 258,
            "src": "/media/previz/buffer01.png",
            "ctype": "buffer",
            "channel": 1,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 258,
            "channel": 0
          }
        ],
        "code": "#define POINTCOUNT 50\n\n#define txbass 0.0\n#define txtreble 1.0\n#define txparams 2.0\n#define txpoints 100.0\n\nvec4 load(in float id)\n{\n    vec2 re = vec2(id, .0);\n    return texture(iChannel0, (0.5 + re) / iChannelResolution[0].xy, -100.0);\n}\n\nvec4 loadArr(in float id, in int i)\n{\n    vec2 re = vec2(id + float(i), .0);\n    return texture(iChannel0, (0.5 + re) / iChannelResolution[0].xy, -100.0);\n}\n\nfloat dist(in vec2 pos, in float size, in vec2 fragCoord)\n{\n    float dist;\n    dist = distance(fragCoord.xy, pos);\n\tdist = size / pow(dist, 2.0);\n    return dist;\n}\n#define dst(pos, size) dist(pos, size, fragCoord)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float bass = load(txbass).x;\n    float treble = load(txtreble).x;\n    float beat = bass * treble;\n\tfloat t = iTime * 0.5;\n    vec2 screen = iResolution.xy * 0.5 + 0.5;\n    \n    float c;\n    \n    vec2 p = load(txparams).xy;\n    float d = min(iResolution.x, iResolution.y) * 6.0 * p.y;\n    float b = dst(screen, bass * d);\n    b += dst(screen + vec2(sin(4.0 * t), sin(5.0 * t)) * 150.0 * bass * p.y, 0.1 * bass * d);\n    b += dst(screen + vec2(sin(2.0 * t), sin(2.0 * t)) * 150.0 * bass * p.y, 0.2 * bass * d);\n    b += dst(screen + vec2(sin(3.0 * t), sin(4.0 * t)) * 150.0 * bass * p.y, 0.3 * bass * d);\n    b += dst(screen + vec2(sin(1.0 * t), sin(10.0 * t)) * 150.0 * bass * p.y, 0.4 * bass * d);\n    \n    for (int i = 0; i < POINTCOUNT; ++i)\n    {\n        vec4 pos = loadArr(txpoints, i);\n        c += dst(pos.xy * screen.xy / 2.0 + screen.xy, 0.015 * d + 250.0 * beat * p.y) * (1.0 - pos.z);\n    }\n    \n    vec2 rf = iResolution.xy / vec2(16.0, 9.0);\n    float m = iMouse.z > 0.0 ? dst(floor(iMouse.xy / rf) * rf + rf / 2.0, length(rf)) : 0.0;\n    \n    float mx = pow(iTime, 1.2);\n    b = clamp(b, 0.0, mx);\n    c = clamp(c, 0.0, mx);\n    m = clamp(m, 0.0, mx);\n    beat = clamp(beat, 0.0, mx);\n    \n\tfragColor = c * vec4(uv * beat,0.5+0.5*sin(iTime),1.0) + b * vec4(1.0 - uv, 0.5+0.5*sin(iTime), 1.0);\n    fragColor *= mix(1.0, 0.25, clamp(iMouse.z, 0.0, 1.0));\n    fragColor += m;\n    fragColor += texture(iChannel1, uv) * 0.75;\n}",
        "name": "Buf B",
        "description": "",
        "type": "buffer"
      }
    ]
  }
}