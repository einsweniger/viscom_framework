{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "4dBXz3",
      "date": "1414140907",
      "viewed": 1441,
      "name": "Vector reflect/clip",
      "username": "iq",
      "description": "How to clip a vector to a hemisphere, and to to reflect it (useful for making sure your vectors are in the positive side of a plane/normal). Move the mouse to see how it behaves.",
      "likes": 20,
      "published": 3,
      "flags": 0,
      "tags": [
        "2d",
        "reflect",
        "vectors",
        "clip"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "// The MIT License\n// Copyright \u00a9 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// Very important trick to avoid discontinuities in rendering:\n//\n// http://www.iquilezles.org/blog/?p=1419\n\n//===============================================================\n\n// Reflect a vetor to be in a given half plane (this works in 3D too)\nvec2 reflVector( in vec2 v, in vec2 n )\n{\n    return v + 2.0*n*max(0.0,-dot(n,v));\n}\n\n// Clip a vetor to a given half plane (this works in 3D too)\nvec2 clipVector( in vec2 v, in vec2 n )\n{\n    float k = dot(n,v);\n    return v - n*k*(0.5-0.5*sign(k));\n}\n\n//===============================================================\n\nfloat distanceToSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\t\n\treturn length( pa - ba*h );\n}\n\n#define e (2.0/min(iResolution.y,iResolution.x))\n\nfloat line( in vec2 p, in vec2 a, in vec2 b, float w )\n{\n    return 1.0 - smoothstep( -e, e, distanceToSegment( p, a, b ) - w );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \tvec2 p = (-iResolution.xy*0.5 + fragCoord.xy)*e;\n \tvec2 m = (-iResolution.xy*0.5 + iMouse.xy)*e;\n    if( iMouse.z<0.01 ) m = 0.8*vec2( cos(iTime), sin(iTime) );\n\n    vec2 no = normalize( vec2(0.2 + 0.5*cos(0.3*iTime), 0.5 ) );\n    vec2 pe = no.yx*vec2(-1.0,1.0);\n    vec2 re = reflVector( m, no );\n    vec2 cl = clipVector( m, no );\n    \n    vec3 col = vec3( 0.5 - 0.2*smoothstep(-e,e,dot(p,no)) );\n    \n    col = mix( col, vec3(0.5,0.5,0.5), line(p, vec2(0.0), no*0.5, 0.012) );\n    col = mix( col, vec3(0.5,0.5,0.5), line(p, no*0.5, no*0.5+( pe-no)*0.1, 0.012) );\n    col = mix( col, vec3(0.5,0.5,0.5), line(p, no*0.5, no*0.5+(-pe-no)*0.1, 0.012) );\n\n    col = mix( col, vec3(1.0,0.6,0.0), line(p, vec2(0.0), re, 0.01) );\n    col = mix( col, vec3(0.7,0.3,0.0), line(p, vec2(0.0), cl, 0.01) );\n    col = mix( col, vec3(0.1,0.1,0.1), line(p, vec2(0.0), m, 0.01) );\n    \n    \n    fragColor = vec4( col, 1.0 );\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}