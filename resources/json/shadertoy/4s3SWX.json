{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "4s3SWX",
      "date": "1462804738",
      "viewed": 302,
      "name": "\u2603",
      "username": "piotrekli",
      "description": "RGB waves\nYou can change the image in Buffer D",
      "likes": 4,
      "published": 3,
      "flags": 32,
      "tags": [
        "test",
        "rgb"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 258,
            "src": "/media/previz/buffer01.png",
            "ctype": "buffer",
            "channel": 1,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 259,
            "src": "/media/previz/buffer02.png",
            "ctype": "buffer",
            "channel": 2,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(texture(iChannel0, uv).x, texture(iChannel1, uv).x, texture(iChannel2, uv).x, 1.0);\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      },
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 260,
            "src": "/media/previz/buffer03.png",
            "ctype": "buffer",
            "channel": 1,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 257,
            "channel": 0
          }
        ],
        "code": "#define WAVE_SPEED 0.1\n#define DAMPING 0.999\n\nfloat laplacianX(sampler2D channel, vec2 fragCoord)\n{\n    float laplacian = 0.0;\n#   define S(DX, DY, WEIGHT) laplacian += texture(channel, (fragCoord+vec2(DX, DY))/iResolution.xy).x*WEIGHT;\n    S( 0,  0, -1.0)\n    S( 0,  1,  0.2)\n    S( 0, -1,  0.2)\n    S( 1,  0,  0.2)\n    S(-1,  0,  0.2)\n    S( 1,  1,  0.05)\n    S( 1, -1,  0.05)\n    S(-1,  1,  0.05)\n    S(-1, -1,  0.05)\n#   undef S\n    return laplacian;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 prevColor = texture(iChannel0, uv);\n    if (iFrame < 32) prevColor = vec4(texture(iChannel1, uv).x, 0.0, 0.0, 0.0);\n    float displ = prevColor.x;\n    float delta = prevColor.z * DAMPING;\n    delta += laplacianX(iChannel0, fragCoord)*WAVE_SPEED;\n    fragColor = vec4(displ+delta, 0.0, delta, 0.0);\n}",
        "name": "Buf A",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [
          {
            "id": 258,
            "src": "/media/previz/buffer01.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 260,
            "src": "/media/previz/buffer03.png",
            "ctype": "buffer",
            "channel": 1,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 258,
            "channel": 0
          }
        ],
        "code": "#define WAVE_SPEED 0.1\n#define DAMPING 0.999\n\nfloat laplacianX(sampler2D channel, vec2 fragCoord)\n{\n    float laplacian = 0.0;\n#   define S(DX, DY, WEIGHT) laplacian += texture(channel, (fragCoord+vec2(DX, DY))/iResolution.xy).x*WEIGHT;\n    S( 0,  0, -1.0)\n    S( 0,  1,  0.2)\n    S( 0, -1,  0.2)\n    S( 1,  0,  0.2)\n    S(-1,  0,  0.2)\n    S( 1,  1,  0.05)\n    S( 1, -1,  0.05)\n    S(-1,  1,  0.05)\n    S(-1, -1,  0.05)\n#   undef S\n    return laplacian;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 prevColor = texture(iChannel0, uv);\n    if (iFrame < 32) prevColor = vec4(texture(iChannel1, uv).y, 0.0, 0.0, 0.0);\n    float displ = prevColor.x;\n    float delta = prevColor.z * DAMPING;\n    delta += laplacianX(iChannel0, fragCoord)*WAVE_SPEED;\n    fragColor = vec4(displ+delta, 0.0, delta, 0.0);\n}",
        "name": "Buf B",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [
          {
            "id": 259,
            "src": "/media/previz/buffer02.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 260,
            "src": "/media/previz/buffer03.png",
            "ctype": "buffer",
            "channel": 1,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 259,
            "channel": 0
          }
        ],
        "code": "#define WAVE_SPEED 0.1\n#define DAMPING 0.999\n\nfloat laplacianX(sampler2D channel, vec2 fragCoord)\n{\n    float laplacian = 0.0;\n#   define S(DX, DY, WEIGHT) laplacian += texture(channel, (fragCoord+vec2(DX, DY))/iResolution.xy).x*WEIGHT;\n    S( 0,  0, -1.0)\n    S( 0,  1,  0.2)\n    S( 0, -1,  0.2)\n    S( 1,  0,  0.2)\n    S(-1,  0,  0.2)\n    S( 1,  1,  0.05)\n    S( 1, -1,  0.05)\n    S(-1,  1,  0.05)\n    S(-1, -1,  0.05)\n#   undef S\n    return laplacian;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 prevColor = texture(iChannel0, uv);\n    if (iFrame < 32) prevColor = vec4(texture(iChannel1, uv).z, 0.0, 0.0, 0.0);\n    float displ = prevColor.x;\n    float delta = prevColor.z * DAMPING;\n    delta += laplacianX(iChannel0, fragCoord)*WAVE_SPEED;\n    fragColor = vec4(displ+delta, 0.0, delta, 0.0);\n}",
        "name": "Buf C",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [
          {
            "id": 8,
            "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg",
            "ctype": "texture",
            "channel": 0,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 260,
            "channel": 0
          }
        ],
        "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}",
        "name": "Buf D",
        "description": "",
        "type": "buffer"
      }
    ]
  }
}