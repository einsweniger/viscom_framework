{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "MdscWn",
      "date": "1524560763",
      "viewed": 68,
      "name": "Odecee spinners",
      "username": "rubixcom",
      "description": "try some simple shapes",
      "likes": 4,
      "published": 3,
      "flags": 0,
      "tags": [
        "marchingsimple"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "float plane( vec3 p , float t)\n{\n\treturn p.y - t;\n}\n\nfloat roundBox( vec3 p, vec3 b, float r )\n{\n    return length(max(abs(p)-b,0.0))-r;\n}\n\n\nfloat sphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nvec2 subtract( vec2 d1, vec2 d2 )\n{\n    vec2 res = max(d2.x,d1.x) == d1.x ? d1 : d2;\n    res.y = d1.y;\n    return res;\n}\n\nvec2 unity( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec3 repeatXZ( vec3 p, vec3 c )\n{\n    vec3 res = mod(p,c)-0.5*c;\n    res.y = p.y;\n    return res;\n}\n\nvec3 repeatXYZ( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nvec2 map( in vec3 p )\n{\n   float len=1.45;\n   float thick=.1;\n   float rad=.3;\n    vec3 pp = repeatXZ(p, vec3(6.0));\n    pp.z = pp.z + .4 * pp.y;\n  //  pp.y += -1.+sin(iTime + p.x - mod(p.x,6.));\n\n    float scale = 1.; float ang = \n        0.5*sin(iTime) * p.x +\n        .2*iTime*(1.0 + p.x - mod(p.x,6.)) + .2*iTime*(p.z - mod(p.z,6.));\n        mat3 rotation = mat3(cos(ang),0.,sin(ang),\n                             0.,1.,0.,\n                  -sin(ang),0.,cos(ang));\n\n    pp = pp * rotation;\n    \n    vec3 ppp = repeatXYZ(p, vec3(.5));\n    vec3 pppw = p - ppp;\n    \n    vec2 res = unity( vec2( plane(     p, -2.5), 1.0 ), vec2( roundBox(pp, vec3(thick,thick,len), rad), 101.0 ) );\n    res = unity(res, vec2( roundBox(pp+vec3(0.,len,0.), vec3(thick,thick,len), rad), 101.0 ) );\n    res = unity(res, vec2( roundBox(pp+vec3(0.,0.+(len-8.*thick),0.-(len-8.*thick)), vec3(thick,len,thick), rad), 101.0 ) );\n    res = unity(res, vec2( roundBox(pp+vec3(0.,0.+(len-8.*thick),len-(len-8.*thick)), vec3(thick,len,thick), rad), 101.0 ) );\n    res = subtract(res, vec2( sphere(ppp,  abs(sin(iTime / 10.))), 0.));\n        \n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 90.0;\n    \n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<64; i++ )\n    {\n\t    float precis = 0.005*t;\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x * .6;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(1.0, 1.0, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n\t\tcol = 0.45 + 0.35*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n        if( m<1.5 )\n        {\n            \n            float f = step(0.,sin(10.*length(pos.xz)+20.*atan(pos.x, pos.z)));\n            col = 0.3 + 0.1*f*vec3(1.0);\n        }\n        \n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(0.4, 0.7, 0.6) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n        \n        dif *= softshadow( pos, lig, 0.02, 2.5 );\n        dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.30*dif*vec3(1.00,0.80,0.55);\n\t\tlin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;\n        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.50*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\n    \tcol = mix( col, vec3(1.0,1.0,1.0), 1.0-exp( -0.0002*t*t*t ) );\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 15.0 + iTime;\n\n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n\n    // camera\t\n    vec3 ro = vec3( -0.5+3.5*cos(0.1*time + 6.0*mo.x), 1.0 + 2.0*mo.y, 0.5 + 4.0*sin(0.1*time + 6.0*mo.x) );\n    vec3 ta = vec3( -0.5, -0.0, 0.5 );\n    // camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    // ray direction\n    vec3 rd = ca * normalize( vec3(p.xy,1.5) );\n\n    // render\t\n    vec3 col = render( ro, rd );\n\n    // gamma\n//    col = pow( col, vec3(0.4545) );\n\n\n    \n    fragColor = vec4( col, 1.0 );\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}