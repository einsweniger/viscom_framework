{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "XsV3WK",
      "date": "1456449169",
      "viewed": 215,
      "name": "Colored Marble",
      "username": "KylBlz",
      "description": "Another day in class.. doing this instead. Change the location of the light with the mouse, change the zoom for a lens effect. ",
      "likes": 4,
      "published": 3,
      "flags": 0,
      "tags": [
        "procedural",
        "2d"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 5,
            "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg",
            "ctype": "texture",
            "channel": 0,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //sphere\n    float radius = 0.2, zoom = 0.25;\n    vec2 offset = vec2(0.3 * cos(iTime * 0.5), 0.2 * sin(iTime)),\n         uv = fragCoord.xy / iResolution.xx,\n         center = uv - offset - vec2(0.5, 0.25);\n    float dist = length(center);\n    if (dist > radius) {\n    \tfragColor = texture(iChannel0, uv);\n        return;\n    }\n    //input\n    vec2 mouse = (iMouse.xy / iResolution.xy) * 0.5 - vec2(0.25);\n    //light\n    vec3 lightLoc = vec3(mouse.x, mouse.y, radius),\n        lightLocDelta = normalize(vec3(offset - center,0.) - lightLoc),\n        lightDir = vec3(lightLocDelta.xy, -sqrt(1. - pow(lightLocDelta.x,2.) - pow(lightLocDelta.y,2.))),    \n        normal = normalize(vec3(center, sqrt(pow(radius,2.) - pow(center.x,2.) - pow(center.y,2.)))),\n        bounce = reflect(lightDir, normal);\n    //diffuse light\n    float brightness = clamp(bounce.z, 0., 1.);\n    //dark effect\n    bounce = reflect(vec3(lightDir.xy, -lightDir.z), normal);\n    float brightness2 = 1.7 - clamp(pow(bounce.z, 3.), 0., 1.);\n    fragColor = texture(iChannel0, normal.xy * (zoom/normal.z) + offset + vec2(0.5, 0.25))\n        * vec4(clamp(abs(normal), 0.5, 1.), 1.)\n        //falloff brightness with distance\n        * clamp(brightness2 - (0.05/normal.z), 0., 1.)\n        //add specular\n        + vec4(pow(brightness, 21.));\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}