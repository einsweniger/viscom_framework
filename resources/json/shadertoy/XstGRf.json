{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "XstGRf",
      "date": "1451724223",
      "viewed": 638,
      "name": "GameOfLife",
      "username": "iq",
      "description": "Conway's Game of Life [url]http://www.iquilezles.org/www/articles/gameoflife/gameoflife.htm[/url]. Buffer A contains the world and it reads/writes to itself to perform the simulation. I implemented 3 variants",
      "likes": 13,
      "published": 3,
      "flags": 32,
      "tags": [
        "2d",
        "simulation",
        "automata",
        "life",
        "conway",
        "gameoflife",
        "multipass"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "// Created by inigo quilez - iq/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4( texelFetch( iChannel0, ivec2(fragCoord), 0 ).xxx, 1.0 );\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      },
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "nearest",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 257,
            "channel": 0
          }
        ],
        "code": "// Created by inigo quilez - iq/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n\n// Conway's Game of Life - http://www.iquilezles.org/www/articles/gameoflife/gameoflife.htm\n//\n// State based simulation. Buffer A contains the simulated world, and it reads and writes to\n// itself to perform the simulation.\n//\n// I implemented three variants of the algorithm with different interpretations\n\n// VARIANT = 0: traditional\n// VARIANT = 1: box fiter\n// VARIANT = 2: high pass filter\n\n#define VARIANT 0\n\n\nint Cell( in ivec2 p )\n{\n    // do wrapping\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    \n    // fetch texel\n    return (texelFetch(iChannel0, p, 0 ).x > 0.5 ) ? 1 : 0;\n}\n\nfloat hash1( float n )\n{\n    return fract(sin(n)*138.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 px = ivec2( fragCoord );\n    \n#if VARIANT==0\n\tint k =   Cell(px+ivec2(-1,-1)) + Cell(px+ivec2(0,-1)) + Cell(px+ivec2(1,-1))\n            + Cell(px+ivec2(-1, 0))                        + Cell(px+ivec2(1, 0))\n            + Cell(px+ivec2(-1, 1)) + Cell(px+ivec2(0, 1)) + Cell(px+ivec2(1, 1));\n\n    int e = Cell(px);\n\n    float f = ( ((k==2)&&(e==1)) || (k==3) ) ? 1.0 : 0.0;\n    \n#endif\n    \n#if VARIANT==1\n\tint k = Cell(px+ivec2(-1,-1)) + Cell(px+ivec2(0,-1)) + Cell(px+ivec2(1,-1))\n          + Cell(px+ivec2(-1, 0)) + Cell(px            ) + Cell(px+ivec2(1, 0))\n          + Cell(px+ivec2(-1, 1)) + Cell(px+ivec2(0, 1)) + Cell(px+ivec2(1, 1));\n\n    int e = Cell(px);\n\n    float f = ( ((k==4)&&(e==1)) || (k==3) ) ? 1.0 : 0.0;\n    \n#endif\n\n    \n#if VARIANT==2\n\tint k = -Cell(px+ivec2(-1,-1)) -   Cell(px+ivec2(0,-1)) - Cell(px+ivec2(1,-1))\n            -Cell(px+ivec2(-1, 0)) + 8*Cell(px)           - Cell(px+ivec2(1, 0))\n            -Cell(px+ivec2(-1, 1)) -   Cell(px+ivec2(0, 1)) - Cell(px+ivec2(1, 1));\n\n    float f = (abs(k+3)*abs(2*k-11)<=9) ? 1.0 : 0.0;\n    \n    \n#endif\n    \n    if( iFrame==0 ) f = step(0.5, hash1(fragCoord.x*13.0+hash1(fragCoord.y*71.1)));\n\t\n\tfragColor = vec4( f, 0.0, 0.0, 0.0 );\n}",
        "name": "Buf A",
        "description": "",
        "type": "buffer"
      }
    ]
  }
}