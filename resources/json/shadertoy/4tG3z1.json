{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "4tG3z1",
      "date": "1473096946",
      "viewed": 385,
      "name": "RayMarching6_sp",
      "username": "SmartPointer",
      "description": "A (not so simple (thanks for pointing that out, ollj)) ray marcher.",
      "likes": 4,
      "published": 3,
      "flags": 0,
      "tags": [
        "raymarching"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "const int MAX_ITER = 60;\nconst int MAX_REFLECTIONS = 10;\nconst float EPSILON = 0.0001;\n\nfloat boxDist(vec3 rayPos, vec3 size) {\n    return length(max(abs(rayPos)-size,0.0))-0.07;\n}\n\nfloat sphereDist(vec3 rayPos, float size) {\n    return length(rayPos) - size;\n}\n\nfloat add(float d1, float d2) {\n    return min(d1, d2);\n}\n\nfloat smoothMin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0-h);\n}\n\nfloat blend(float d1, float d2) {\n    return smoothMin(d1, d2, 0.03);\n}\n\n\nfloat scene(vec3 rayPos) {\n    vec3 rayPosO = rayPos;\n    rayPos = mod(rayPos, 1.0) - 0.5;\n    //return boxDist(rayPos, vec3(0.2, 0.25, 0.2));\n    //return sphereDist(rayPos, 0.3);\n    return blend(sphereDist(rayPos, 0.3), sin(boxDist(rayPos, vec3(0.01, 0.01, 0.5))));\n}\n\nvec3 getNormal(in vec3 p) {\n    return normalize(vec3(\n        scene(vec3(p.x + EPSILON, p.y, p.z)) - scene(vec3(p.x - EPSILON, p.y, p.z)),\n        scene(vec3(p.x, p.y + EPSILON, p.z)) - scene(vec3(p.x, p.y - EPSILON, p.z)),\n        scene(vec3(p.x, p.y, p.z + EPSILON)) - scene(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nvec3 applyLighting(vec3 color, vec3 rayPos, vec3 lightPos, vec3 cameraOrigin) {\n    color *= mod(rayPos, 4.0) - 2.0;\n    vec3 n = getNormal(rayPos);\n\n    // diffuse\n    vec3 l = normalize(lightPos - rayPos);\n    color = vec3(color.x, color.y, color.z);\n    vec3 diffuseColor = 4.0 * color * max(dot(n, l), 0.0);\n    \n    // attenuation\n    float lightSurfaceDist = length(lightPos - rayPos);\n    float attenuation = min(1.0 / lightSurfaceDist, 1.0);\n    \n    return diffuseColor * attenuation;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 color = vec3(0.0);\n\n    // camera\n    vec3 cameraTarget = vec3(0.0);\n    vec3 cameraOrigin = vec3(0.0, 0.0, 2.0);\n    \n     cameraTarget = vec3(sin(iTime * 0.5), cos(iTime * 0.6), 1.0 + iTime);\n     cameraOrigin = vec3(0.0, 0.0, 0.0 + iTime);\n    \n    vec3 cameraDir = normalize(cameraTarget - cameraOrigin);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 cameraRight = normalize(cross(cameraDir, up));\n    vec3 cameraUp = normalize(cross(cameraRight, cameraDir));\n\n    // screen\n    vec2 screenPos = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    screenPos.x *= iResolution.x / iResolution.y;\n    \n    vec3 pixel = cameraOrigin + cameraDir + cameraRight * screenPos.x + cameraUp * screenPos.y;\n    vec3 rayOrigin = cameraOrigin;\n    vec3 rayDir = normalize(pixel - rayOrigin);\n\n    vec3 sphereColor = vec3(0.1, 0.2, 0.3); \n    float totalDist = 0.0;\n    int reflections = 0;\n    for (int i = 0; i < MAX_ITER + MAX_REFLECTIONS; i++) {\n        if (reflections > MAX_REFLECTIONS) {\n            break;\n        }\n        vec3 rayPos = rayDir * totalDist + rayOrigin;\n        float dist = scene(rayPos);\n        totalDist += dist;\n        if (dist < EPSILON) {\n            color += applyLighting(sphereColor, rayPos, cameraOrigin, cameraOrigin) / float(reflections + 1);\n            vec3 normal = getNormal(rayPos);\n            rayDir = normalize(reflect(rayDir, normal));\n            rayOrigin = rayPos + rayDir * 0.1;\n            totalDist = 0.0;\n            reflections++;\n        }\n    }\n\n    \n    fragColor = vec4(color, 1.0);\n}\n",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}