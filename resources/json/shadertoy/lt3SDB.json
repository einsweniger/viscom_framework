{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "lt3SDB",
      "date": "1481400254",
      "viewed": 237,
      "name": "Sphere Ray",
      "username": "FurryLiso",
      "description": "Sphere Ray Tracing",
      "likes": 1,
      "published": 3,
      "flags": 0,
      "tags": [
        "3d",
        "raytracing",
        "sphere"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "struct Sphere\n{\n    vec3 Pos;\n    float Rad;\n    vec4 Color;\n};\n\nstruct Ray\n{\n    vec3 Pos;\n    vec3 Dir;\n};\n    \nstruct RayIntersect\n{\n    Sphere S;\n    vec3 Point;\n    bool is_intersecting;\n};\n\nRayIntersect Intersect(Sphere S, Ray R)\n{\n   RayIntersect Ri = RayIntersect(S, vec3(0.0), false);\n   vec3 L = S.Pos - R.Pos;\n    \n   float r2 = S.Rad * S.Rad;\n    \n   float tca = dot(L, R.Dir);\n    \n   if (tca < 0.0) \n       return Ri;\n    \n   float d2 = dot(L, L) - tca*tca;\n    \n   if (d2 > r2) \n       return Ri;\n    \n   Ri.is_intersecting = true;\n    \n   float tch = sqrt( r2 - d2 );\n   float t0 = tca - tch;\n   float t1 = tca + tch;\n   \n   if(t0 < t1)\n       Ri.Point = R.Pos + R.Dir * t1;\n   else\n       Ri.Point = R.Pos + R.Dir * t0;\n    \n   return Ri;\n}\n\nvec4 Lambert(vec3 PosLight, RayIntersect X, vec4 Color)\n{\n    float factor    = 0.6;\n\tvec3 n2   = normalize(PosLight - X.S.Pos);\n\tvec3 l2   = normalize(X.Point - X.S.Pos);\n\treturn Color * max(dot(l2, n2) + factor, 0.0) / (1.0 + factor);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    Sphere A = Sphere(vec3(iResolution.x / 2.0, iResolution.y / 2.0, 1.0), 150.0, vec4(1.0, 0.45, 0.21, 1.0));\n    Ray R = Ray(vec3(fragCoord, 0.0), vec3(0.0,0.0,1.0));\n    vec3 LightPos = vec3(0.0, 0.0, -20.0);\n    \n    RayIntersect X = Intersect(A, R);\n    \n    if(X.is_intersecting == true)\n       fragColor = Lambert(LightPos, X, A.Color)*0.8;\n    else\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}