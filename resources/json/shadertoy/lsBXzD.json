{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "lsBXzD",
      "date": "1409604763",
      "viewed": 367,
      "name": "It's ASCII bitch!",
      "username": "CeeJayDK",
      "description": "I started this trying to improve the performance of the bit field in https://www.shadertoy.com/view/lssGDj\n\nI ended up getting 24 bit from the mantissa part of the float and the sign bit as well for 25 bits which was perfect for size 5 x 5 characters.\n",
      "likes": 5,
      "published": 3,
      "flags": 0,
      "tags": [
        "2d",
        "text",
        "field",
        "ascii",
        "bit",
        "art",
        "packing"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 12,
            "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm",
            "ctype": "video",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [],
        "code": "//We need precision or the bit extraction might not be correct\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\n//It's also important that your Intel graphics driver settings for 3D is set to Quality,\n//as the Performance setting will likely force lower precision in the shaders.\n\n//This is mainly something you need to be aware of when using Intel GPU drivers,\n//as modern AMD or Nvidia drivers don't even have an option for lower 3D quality\n\n//A fork of https://www.shadertoy.com/view/lssGDj \n\n/*\nldexp and frexp are available in GLSL with OpenGL 4.0 and up,\nin HLSL with SM2.x and up,\nbut not in OpenGL ES / WebGL.\n\nBut we can make our own:\n*/\n\nfloat ldexp (float mantissa, float exponent)\n{\n\treturn exp2(exponent) * mantissa;\n}\n\n\nfloat frexp (float f, out float exponent)\n{\n\texponent = ceil(log2(f));\n\tfloat mantissa = exp2(-exponent) * f;\n\treturn mantissa;\n}\n\n\n\nfloat character(float n, vec2 p) // some compilers have the word \"char\" reserved\n{\n    p = floor(p * vec2(8.0,-8.0) + (vec2(-4.0,4.0) + vec2(1.0)) );\n\n\tif (clamp(p.x, 0.0, 4.0) == p.x && clamp(p.y, 0.0, 4.0) == p.y)\n\t{\n        //test values\n        //n = -(exp2(24.)-1.0); //-(2^24-1) All bits set - a white 5x5 box\n        \n        //24 bits and a multiplier (exponent)\n        //Set the highest bit and use log2 to get the exponent that could respresent that\n        //adjust the mantissa and get the remaining bits\n        \n \n        //p = floor(p);\n    \tfloat x = (5.0 * p.y + p.x);\n        //x = floor(x);\n        \n\n        \n        float signbit = (n < 0.0)\n          ? 1.0 \n          : 0.0 ;\n        \n        signbit = (x == 0.0) \n          ? signbit\n          : 0.0 ;\n        \n\n        //if (int(mod(n/exp2(p.x + 5.0*p.y), 2.0)) == 1) return 1.0;\n        //if (int(mod(n/exp2(x), 2.0)) == 1) return 1.0;\n        \n    \t//return floor( fract( abs( 0.5*n*exp2(-x))) * 2.0);\n        //return floor( fract( abs( n*exp2(-x-1.0))) * 2.0);\n        //return float( fract( abs( n*exp2(-x-1.0))) >= 0.5);\n        \n        //Division exp2\n        //return float( fract( abs( n/exp2(x+1.0))) > 0.50); //works on intel and Ipad - not on AMD\n        \n        //return float( fract( abs( n/exp2(x+1.0))) >= 0.50); //works on AMD - not on intel (wait now it works on intel)      \n        \n        //Division pow\n        //return float( fract( abs( n/pow(2.0,x+1.0))) >= 0.50); //works on AMD and intel\n        \n        //Multiply exp2\n        //return float( fract( abs( n*exp2(-x-1.0))) >= 0.5); //works on AMD and intel\n        \n        //Tenary Multiply exp2\n        return ( fract( abs( n*exp2(-x-1.0))) >= 0.5) ? 1.0 : signbit; //works on AMD and intel\n        \n\t}\t\n\t\n    return 0.0;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy;\n    vec2 cursor_position = (floor(uv/8.0)*8.0+0.5)/iResolution.xy; //slight blur\n\tvec3 col = texture(iChannel0, cursor_position).rgb; \n    //vec3 col = texture(iChannel0, fragCoord.xy/iResolution.xy).rgb;\n\t\n    \n    #define graytype 4\n\t#if graytype == 1\n\t  float luma = (col.r + col.b) * 0.5; // skip green component\n\t#elif graytype == 2\n\t  float luma = (col.r + col.g + col.b)/3.0;\n\t#elif graytype == 3\n      float luma = dot(col,vec3(0.2126, 0.7152, 0.0722));\n    #else \n        vec3 colortarget = vec3(0.,255.,0.)/255.0;\n        vec3 diff = col - colortarget;\n        vec3 square_diff = diff * diff;\n        vec3 distance_coefs = vec3((0.5 * diff.r + 2.0), 4.0, (-0.5 * diff.r + 3.0));\n\n        float colordistance = 0.28 * sqrt( dot(square_diff,distance_coefs) );\n    \t\n    \tcol = (colordistance > 0.35 ) ? col : vec3(0.0); \n    \tfloat luma = dot(col,vec3(0.2126, 0.7152, 0.0722));\n    \n\t#endif\n    \n    \n    float gray = smoothstep(0.0,1.0,luma); //increase contrast\n    //gray = smoothstep(0.0,1.0,gray); //increase contrast\n    \n    \n    //test patterns\n    //gray = (floor(uv.x/8.0)*8.0)/iResolution.x;\n    //gray = (floor(uv.y/8.0)*8.0)/iResolution.y;\n    //gray = ((floor(uv.x/8.0)*8.0)/iResolution.x + (floor(uv.y/8.0)*8.0)/iResolution.y) *0.5; \n    //gray = ((floor(uv.x/8.0)*8.0)/iResolution.x * (floor(uv.y/8.0)*8.0)/iResolution.y) * 1.5; \n    \n    //maybe try levels here ?\n    \n    //float gray = luma;\n    //gray = 1.0 - gray;\n    \n/* Gradients:\n\n .'~:;!>+=icjtJY56SXDQKHNWM\n .':!+ijY6XbKHNM\n .:%oO$8@#M\n .:+j6bHM\n .:coCO8@\n .:oO8@\n .:oO8\n :+#\n\n .:^\"~cso*wSO8Q0#\n .:^\"~csoCwSO8Q0#\n .:^\"~c?o*wSO8Q0#\n\nn value // # of pixels // character\n-----------//----//-------------------\n4194304.   //  1 // . (bottom aligned) \n131200.    //  2 // : (middle aligned) \n4198400.   //  2 // : (bottom aligned)\n2228352.   //  3 // ;\n4325504.   //  3 // i (short)\n14336.     //  3 // - (small)\n324.       //  3 // ^\n4329476.   //  4 // i (tall)\n330.       //  4 // \"\n31744.     //  5 // - (larger)\n283712.    //  5 // ~\n10627072.  //  5 // x\n145536.    //  5 // * or + (small and centered) \n6325440.   //  6 // c (narrow - left aligned)\n12650880.  //  6 // c (narrow - center aligned)\n9738240.   //  6 // n (left aligned)\n6557772.   //  7 // s (tall)\n8679696.   //  7 // f\n4532768.   //  7 // v (1st)\n4539936.   //  7 // v (2nd)\n4207118.   //  7 // ?\n-17895696. //  7 // %\n6595776.   //  8 // o (left aligned)\n13191552.  //  8 // o (right aligned)\n14714304.  //  8 // c (wide)\n12806528.  //  9 // e (right aligned)\n332772.    //  9 // * (top aligned)\n10648704.  //  9 // * (bottom aligned)\n4357252.   //  9 // +\n-18157904. //  9 // X\n11195936.  // 10 // w\n483548.    // 10 // s (thick)\n15218734.  // 11 // S \n31491134.  // 11 // C   \n15238702.  // 11 // C (rounded)\n22730410.  // 11 // M (more like a large m)\n10648714.  // 11 // * (larger)\n4897444.   // 11 // * (2nd larger)\n14726438.  // 11 // @ (also looks like a large e)\n23385164.  // 11 // &\n15255086.  // 12 // O\n16267326.  // 13 // S (slightly larger)\n15252014.  // 13 // 8\n15259182.  // 13 // 0  (O with dot in the middle)\n15517230.  // 13 // Q (1st)\n-18405232. // 13 // M\n-11196080. // 13 // W\n32294446.  // 14 // Q (2nd)\n15521326.  // 14 // Q (3rd)\n32298542.  // 15 // Q (4th)\n15324974.  // 15 // 0 or \u00c3\u02dc\n16398526.  // 15 // $\n11512810.  // 16 // #\n-33061950. // 17 // 5 or S (stylized)\n-33193150. // 19 // $ (stylized)\n-33150782. // 19 // 0 (stylized)\n\n\n .:*o&8@#\n\n*/\n    \n    /*\n    //Original method from movAX13h\n\t//Serial - uses as many cycles as comparisons\n    //Fine as long as you keep the number of different characters low\n\t//but gets expensive when you add a lot of different characters\n\n\tfloat n =  65536.0;             // .\n\tif (gray > 0.2) n = 65600.0;    // :\n\tif (gray > 0.3) n = 332772.0;   // *\n\tif (gray > 0.4) n = 15255086.0; // o \n\tif (gray > 0.5) n = 23385164.0; // &\n\tif (gray > 0.6) n = 15252014.0; // 8\n\tif (gray > 0.7) n = 13199452.0; // @\n\tif (gray > 0.8) n = 11512810.0; // #\n\t*/\n      \n    /*\n\t//\"Just use an array!\" - except ..\n\t//arrays in WebGL suck!\n    //\"index expression must be a constant\" - :(\n    int i = int(gray * 9.45);\n    \n    float array[10];\n    array[0]   = float (0.0);\n    array[1]   = float (65536.0);\n    array[2]   = float (65600.0);\n    array[3]   = float (332772.0);\n    array[4]   = float (15255086.0);\n    array[5]   = float (23385164.0);\n    array[6]   = float (15252014.0);\n    array[7]   = float (13199452.0);\n    array[8]   = float (11512810.0);\n\tarray[9]   = float (11512810.0);\n    \n    float n = array[i];\n\t*/\n    \n    /*\n\tI tested dynamically indexed arrays in OpenGL.\n    It works but generates a very slow shader with tons of instructions.\n\tIf you know how to use them in a efficient way, please let me know.\n\t*/\n    \n\t/*   \n    //add method - should be precise as n + 0.0 should not affect precision\n\n    gray = floor(gray * 10.0);\n\n    float n1 = (gray == 2.) ? 4194304.0 : 0.0;    // .\n\tfloat n2 = (gray == 3.) ? 131200.0 : 0.0;    // :\n    float n3 = (gray == 4.) ? 332772.0 : 0.0;   // *\n    float n4 = (gray == 5.) ? 15255086.0 : 0.0; // o \n    float n5 = (gray == 6.) ? 23385164.0 : 0.0; // &\n    float n6 = (gray == 7.) ? 15252014.0 : 0.0; // 8\n    float n7 = (gray == 8.) ? 13199452.0 : 0.0; // @\n    float n8 = (gray >= 9.) ? 11512810.0 : 0.0; // #\n\n    float n = n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8;\n\t*/\n    \n    /*\n    //2nd add method - as suggested by Crosire\n\t//should be precise as n * 1.0 should not affect precision\n    //but slower because it adds a MUL for each  entry\n\n    gray = floor(gray * 10.0);\n\n    float n1 = float(gray == 1.) * 4194304. ; // .\n\tfloat n2 = float(gray == 2.) * 131200.  ; // :\n    float n3 = float(gray == 3.) * 6557772. ; // s\n    float n4 = float(gray == 4.) * 332772.  ; // * \n    float n5 = float(gray == 5.) * 15218734.; // S\n    float n6 = float(gray == 6.) * 15252014.; // 8\n    float n7 = float(gray == 7.) * 15324974.; // 0\n    float n8 = float(gray >= 8.) * 11512810.; // #\n    \n    float n = n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8;\n    */\n   \n    /*\n    //dot method - might have precision errors\n    //errors seen - still trying to get rid of them.\n    //The problem seems to be that I subtract 3 which causes 25 bit values to drop the least\n    //significant bit\n\n    // .. could try a DP3_ADD solution\n    // .. could also try moving the range of the n values so -3 will still be within the precision range\n\n    gray = floor(gray * 10.0);\n\n    float n1 = (gray == 1.) ? (65536.0 - 3.0)    : 1.0; // .\n\tfloat n2 = (gray == 2.) ? (65600.0 - 3.0)    : 1.0; // :\n    float n3 = (gray == 3.) ? (332772.0 - 3.0)   : 1.0; // *\n    float n4 = (gray == 4.) ? (15255086.0 - 3.0) : 1.0; // o \n    float n5 = (gray == 5.) ? (23385164.0 - 3.0) : 1.0; // &\n    float n6 = (gray == 6.) ? (15252014.0 - 3.0) : 1.0; // 8\n    float n7 = (gray == 7.) ? (13199452.0 - 3.0) : 1.0; // @\n    float n8 = (gray >= 8.) ? (11512810.0 - 3.0) : 1.0; // #    \n        \n    float n = dot(vec4(n1,n2,n3,n4),vec4(n5,n6,n7,n8));\n    n = (gray == 0.) ? 0.0 : n; //I could also just add it to the list (0.0 - 3.0)\n    */\n    \n    /*\n    //2nd dot method - using Crosires suggestion - precision errors\n\t//doesn't work with the signbit code\n    gray = floor(gray * 10.0);\n\n    float n1 = float(gray == 1.) * (65536.0 - 4.0)    + 1.0; // .\n\tfloat n2 = float(gray == 2.) * (65600.0 - 4.0)    + 1.0; // :\n    float n3 = float(gray == 3.) * (332772.0 - 4.0)   + 1.0; // *\n    float n4 = float(gray == 4.) * (15255086.0 - 4.0) + 1.0; // o \n    float n5 = float(gray == 5.) * (23385164.0 - 4.0) + 1.0; // &\n    float n6 = float(gray == 6.) * (15252014.0 - 4.0) + 1.0; // 8\n    float n7 = float(gray == 7.) * (13199452.0 - 4.0) + 1.0; // @\n    float n8 = float(gray >= 8.) * (11512810.0 - 4.0) + 1.0; // #    \n        \n    float n = dot(vec4(n1,n2,n3,n4),vec4(n5,n6,n7,n8));\n    */\n    \n/*    \n    //max method - should be precise\n\t//doesn't work when n is negative\n\n    gray = floor(gray * 10.0);\n\n    float n1 = (gray == 2.) ? 65536.0 : 0.0;    // .\n\tfloat n2 = (gray == 3.) ? 65600.0 : 0.0;    // :\n    float n3 = (gray == 4.) ? 332772.0 : 0.0;   // *\n    float n4 = (gray == 5.) ? 15255086.0 : 0.0; // o \n    float n5 = (gray == 6.) ? 23385164.0 : 0.0; // &\n    float n6 = (gray == 7.) ? 15252014.0 : 0.0; // 8\n    float n7 = (gray == 8.) ? 13199452.0 : 0.0; // @\n    float n8 = (gray >= 9.) ? 11512810.0 : 0.0; // #\n\n    float max12 = max(n1,n2);\n    float max34 = max(n3,n4);\n    float max56 = max(n5,n6);\n    float max78 = max(n7,n8);\n    \n    float max1234 = max(max12,max34);\n    float max5678 = max(max56,max78);\n    \n    float n = max(max1234,max5678);\n*/\t\n\n\t/*\n    //conditional assignment method - should be precise\n    //fast on hardware that can do this without branching (PC and Mac, unsure about mobile)\n    //doesn't work when n is negative\n\n    gray = floor(gray * 10.0);\n\n    float n1 = (gray == 2.) ? 4194304.0    : 0.0; // .\n\tfloat n2 = (gray == 3.) ? 4198400.0    : 0.0; // :\n    float n3 = (gray == 4.) ? 332772.0   : 0.0; // *\n    float n4 = (gray == 5.) ? 15255086.0 : 0.0; // O \n    float n5 = (gray == 6.) ? 23385164.0 : 0.0; // o \n    //float n5 = (gray == 6.) ? 23385164.0 : 0.0; // &\n    float n6 = (gray == 7.) ? 15252014.0 : 0.0; // 8\n    float n7 = (gray == 8.) ? 13199452.0 : 0.0; // @\n    float n8 = (gray >= 9.) ? -33061950.0 : 0.0; // #\n\n    float max12 = (n1 > n2) ? n1 : n2;\n    float max34 = (n3 > n4) ? n3 : n4;\n    float max56 = (n5 > n6) ? n5 : n6;\n    float max78 = (n7 > n8) ? n7 : n8;\n    \n    float max1234 = (max12 > max34) ? max12 : max34;\n    float max5678 = (max56 > max78) ? max56 : max78;\n    \n    float n = (max1234 > max5678) ? max1234 : max5678;\n\t*/\n    \n\t/*\n    //2nd conditional assignment method - should be precise\n    //fast on hardware that can do this without branching (PC and Mac, unsure about mobile)\n    //works fine when n is negative\n   \n    float n02 = (gray < .10) ? 0.0        : 65536.0;    //   or .\n\tfloat n34 = (gray < .35) ? 65600.0    : 332772.0;   // :\n    float n56 = (gray < .55) ? 15255086.0 : 23385164.0; // *\n    float n78 = (gray < .75) ? 15252014.0 : 13199452.0; // O \n    \n    float n0234 = (gray < .25) ? n02 : n34;\n    float n5678 = (gray < .65) ? n56 : n78;\n    \n    //need to add the last character\n    \n    float n = (gray < .45) ? n0234 : n5678;\n    */\n    \n    \n    //2nd conditional assignment method - expanded to use all 17 chars\n    //fast on hardware that can do this without branching (PC and Mac, unsure about mobile)\n    //TODO add Q and move space to special case like with the signbit\n    //and maybe add dithering\n    float num_of_chars = 16. ;\n    \n    float n12   = (gray < (1./num_of_chars))  ? 0.        : 4194304. ; //   or .\n\tfloat n34   = (gray < (3./num_of_chars))  ? 131200.   : 324.     ; // : or ^\n    float n56   = (gray < (5./num_of_chars))  ? 330.      : 283712.  ; // \" or ~\n    float n78   = (gray < (7./num_of_chars))  ? 12650880. : 4532768. ; // c or v\n    float n910  = (gray < (9./num_of_chars))  ? 13191552. : 10648704.; // o or *\n    float n1112 = (gray < (11./num_of_chars)) ? 11195936. : 15218734.; // w or S\n    float n1314 = (gray < (13./num_of_chars)) ? 15255086. : 15252014.; // O or 8 \n    float n1516 = (gray < (15./num_of_chars)) ? 15324974. : 11512810.; // 0 or # //forgot about Q\n    \n    float n1234     = (gray < (2./num_of_chars))  ? n12   : n34;\n    float n5678     = (gray < (6./num_of_chars))  ? n56   : n78;\n    float n9101112  = (gray < (10./num_of_chars)) ? n910  : n1112;\n    float n13141516 = (gray < (14./num_of_chars)) ? n1314 : n1516;\n    \n    float n12345678 = (gray < (4./num_of_chars)) ? n1234 : n5678;\n    float n910111213141516 = (gray < (12./num_of_chars)) ? n9101112 : n13141516;\n    \n    float n = (gray < (8./num_of_chars)) ? n12345678 : n910111213141516;\n\t\n\n\t\n\t//vec2 p = mod(uv*0.25, 2.0) - vec2(1.0);\n    //vec2 p = fract(uv * 0.125) * 2.0 - 1.0;\n    vec2 p = fract(uv * 0.125);\n    \n\n    col = pow(col,vec3(0.5));\n    col = col*character(n, p);\n        \n    col = mix(vec3(character(n, p)),col,iMouse.x / iResolution.x);\n\n\tfragColor = vec4(col,1.0);\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}