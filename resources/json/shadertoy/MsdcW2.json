{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "MsdcW2",
      "date": "1520297875",
      "viewed": 144,
      "name": "Performance Test",
      "username": "BeardThings",
      "description": "Attempting to optimize sdf performance",
      "likes": 0,
      "published": 3,
      "flags": 0,
      "tags": [
        "test"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "#define PERF_TEST\n\nfloat Sphere(in vec3 p, in float r)\n{\n    return length(p) -r;\n}\n\nfloat Plane(in vec3 p, in vec3 d, in float r)\n{\n    return r - dot(p, d);\n}\n\nfloat SDF(in vec3 p)\n{\n    const float l = 15.0;\n    \n    float d = Plane(p, vec3(0.0, 0.0, 1.0), 2.0);\n    for(float i = 0.0; i < l; i+=1.0)\n    {\n        for(float j = 0.0; j < l; j+=1.0)\n        {\n            float x = cos(i / l * 3.14 * 2.0 + iTime * 0.5);\n            float y = sin(j / l * 3.14 * 2.0 + iTime * 0.5);\n            d = min(d, Sphere(p - vec3(x, y, 0.0), 0.05));\n        }\n    }\n    \n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 screenSpace = uv * 2.0 - 1.0;\n    \n    // Origin, move this around for fun ^.^\n    vec3 o = vec3(0, 0, -2.0);\n    \n    // Create your view basis vectors however you'd like\n    vec3 f = vec3(0,0, 1.0);\n    vec3 u = vec3(0, 1.0, 0);\n    vec3 r = vec3(1.0, 0, 0);\n    \n    float aspect = iResolution.y / iResolution.x;\n    float aperture = 1.0;\n    \n    // Have our forward with an aperture at 1.0 \n    // and transform our vector by it's space on the screen\n    vec3 dir = f * aperture + r * screenSpace.x + u * screenSpace.y * aspect;\n    \n    // Max step of 16 is fine for a sphere, can be higher for complex scenes\n    const int MaxSteps = 32;\n    \n    // Our final color\n    vec3 fc = vec3(0);\n    \n    float dist = 0.0;\n    float pSdf = 10000000.0;\n    int i = 0;\n    for(i; i < MaxSteps; ++i)\n    {\n        vec3 p = o + dir * dist;\n        float sdf = SDF(p);\n        \n        // If we're close enough to the surface, then count it as \"reached\"\n        const float E = 0.001;\n        \n        #ifdef PERF_TEST\n\t\tconst float SE = 0.01;\n        bool n = abs(pSdf - sdf) < SE && sdf < 0.01;\n        #else\n        bool n = false;\n        #endif\n        \n\n        if(sdf < E || n)\n        {\n            break;\n        }\n        dist += sdf;\n        pSdf = sdf;\n    }\n    fc = vec3(float(i) / float(MaxSteps));\n    \n    fragColor = vec4(fc, 1.0);\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}