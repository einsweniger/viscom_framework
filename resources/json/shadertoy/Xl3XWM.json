{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "Xl3XWM",
      "date": "1479793586",
      "viewed": 423,
      "name": "ultra simple WASD",
      "username": "lomateron",
      "description": "ultra simple WASD \nwith \nultra simple raymarch",
      "likes": 1,
      "published": 3,
      "flags": 48,
      "tags": [
        "raymarch"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "nearest",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "float objec(vec3 p)\n{\n    return max(sin(p.x)+sin(p.z)+p.y,length(p)-32.);\n}\nvoid march(vec3 look, inout vec3 p, inout float d)\n{\n    for (int i = 0; i < 32; ++i)\n    {\n        d = objec(p);\n        p += d*look;\n    }\n}\n#define D .001\nvec3 normal(vec3 p){\n    return normalize(vec3(\n        objec(vec3(p.x + D, p.y, p.z)) - objec(vec3(p.x - D, p.y, p.z)),\n        objec(vec3(p.x, p.y + D, p.z)) - objec(vec3(p.x, p.y - D, p.z)),\n        objec(vec3(p.x, p.y, p.z + D)) - objec(vec3(p.x, p.y, p.z - D))\n    ));}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 look   = texture( iChannel0, (vec2(1.,0.)+.5)/iResolution.xy).xyz;\n    vec3 camPos = texture( iChannel0, (vec2(2.,0.)+.5)/iResolution.xy).xyz;\n    camPos+=vec3(0.,16.,-64.);\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv*2.-1.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    mat3 mtx;\n    mtx[2] = look;\n    mtx[0] = normalize(vec3(mtx[2].z,0.,-mtx[2].x));\n    mtx[1] = cross(mtx[2],mtx[0]);\n    look = mtx*normalize(vec3(uv,1.));\n \n    vec3 p = camPos;\n    float d = 0.;\n    march(look, p, d);\n    vec3 n = look;\n    if(d<.1){ n = normal(p); }\n\tfragColor = vec4(n,1.0);\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      },
      {
        "inputs": [
          {
            "id": 33,
            "src": "/presets/tex00.jpg",
            "ctype": "keyboard",
            "channel": 1,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "nearest",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 257,
            "channel": 0
          }
        ],
        "code": "void rotVec(inout vec4 v, float x, float y)\n{\n    y = asin(v.y) - y;\n    if(-1.56 > y){ y = -1.56; };\n    if( 1.56 < y){ y = 1.56; };\n    float l = cos(y);\n    float xv = v.x, zv = v.z;\n    v.z = zv * cos(x) - xv * sin(x);\n    v.x = zv * sin(x) + xv * cos(x);\n    l /= sqrt(v.x * v.x + v.z * v.z);\n    v.x *= l;\n    v.y = sin(y);\n    v.z *= l;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float keyW  = texture( iChannel1, vec2(87.5/256.,.25) ).x;\n    float keyS  = texture( iChannel1, vec2(83.5/256.,.25) ).x;\n    float keyA  = texture( iChannel1, vec2(65.5/256.,.25) ).x;\n    float keyD  = texture( iChannel1, vec2(68.5/256.,.25) ).x;\n    vec4 mouse  = texture( iChannel0, vec2(0.5,.5)/iResolution.xy);\n    vec4 look   = texture( iChannel0, vec2(1.5,.5)/iResolution.xy);\n    vec4 camPos = texture( iChannel0, vec2(2.5,.5)/iResolution.xy);\n    vec4 final = vec4(0.);\n    \n    //make sure \"look\" always is a normalized vector\n    if(dot(look,look)==0.){look = vec4(0.,0.,1.,0.);}\n    \n    if(fragCoord.x == 0.5)//mod mouse texel\n    {\n        if(iMouse.z>0.){ mouse = iMouse; }\n        else           { mouse.z = 0.;   }\n\t\tfinal = mouse;\n    }\n    if(fragCoord.x == 1.5)//mod look texel\n    {\n        if(iMouse.z>0. && mouse.z>0.)\n        {\n            mouse = (iMouse-mouse)*.01;\n            rotVec(look, mouse.x, -mouse.y); \n        }\n        final = look;\n    }\n    if(fragCoord.x == 2.5)//mod camPos texel\n    {\n        final = camPos + look*(keyW-keyS)*.1 +\n                normalize(vec4(look.z,0.,-look.x,0.))*(keyD-keyA)*.1;\n    }\n    fragColor = final;\n}",
        "name": "Buf A",
        "description": "",
        "type": "buffer"
      }
    ]
  }
}