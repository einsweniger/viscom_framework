{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "MlscRj",
      "date": "1505830333",
      "viewed": 248,
      "name": "random menger sponge",
      "username": "abje",
      "description": "looks pretty cool, i think.\nstill work in progress",
      "likes": 3,
      "published": 3,
      "flags": 0,
      "tags": [
        "recursive",
        "mengersponge",
        "poppinginandout"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "#define time iTime*0.5\n#define HASHSCALE4 vec4(.1031, .1030, .0973, .1099)\n\nint seed1;\nint seed2;\n\n//hash without sin by Dave_Hoskins https://www.shadertoy.com/view/4djSRW\nfloat hash34(vec4 p4)\n{\n\tp4 = fract(p4  * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.x+p4.z)*p4.z);\n}\n\n\nfloat noise(vec3 p3)\n{\n    float floortime = floor(time);\n    return mix(floor(hash34(vec4(p3,floortime))+0.5),floor(hash34(vec4(p3,floortime+1.0))+0.5),min((time-floortime)*2.0,1.0));\n}\n\nint seed = 129928175;\n\nbool map(vec3 p) {\n    p = mod(p,3.0);\n    int num = int(p.x)+int(p.y)*3+int(p.z)*9;\n    return (seed&1<<num) != 0;\n}\n\n/*float mapf(vec3 p) {\n    p = mod(p,3.0);\n    int num = int(p.x)+int(p.y)*3+int(p.z)*9;\n    return noise(p)*float(abs(p.x-1.0)>0.1||abs(p.y-1.0)>0.1);\n}*/\n\nfloat mapf(vec3 p) {\n    p = mod(p,3.0);\n    int num = int(p.x)+int(p.y)*3+int(p.z)*9;\n    return mix(float((seed1&(1<<num)) > 0),float((seed2&(1<<num)) > 0),min(fract(time)*3.0,1.0));\n}\n\n/*\nif (cell.x == 0.0) {\n    seed = 129928175;\n    cam = vec3(1.5,2.5,time*0.2);\n}\nif (cell.x == 1.0) {\n    seed = 4289552;\n    cam = vec3(1.7,1.7,time*0.2);\n}\nif (cell.x == 2.0) {\n    seed = 131285248;\n    cam = vec3(1.52,1.5,time*0.2);\n}\nif (cell.x == 3.0) {\n    seed = 96210799;\n    cam = vec3(1.5,1.5,time*0.2);\n}\nif (cell.x == 4.0) {\n    seed = 85205317;\n    cam = vec3(1.5,1.7,time*0.2);\n}\nif (cell.x == 5.0) {\n    seed = 262735;\n    cam = vec3(1.5,1.5,time*0.2);\n}\nif (cell.x == 6.0) {\n    seed = 85197125;\n    cam = vec3(0.5,0.5,time*0.2);\n}\nif (cell.x == 7.0) {\n    seed = 12324399;\n    cam = vec3(1.5,0.5,time*0.2);\n}\n*/\n\nvec4 iBox( in vec3 ro, in vec3 rd, in float rad ) \n{\n\t// ray-box intersection in box space\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n    vec3 mask = vec3(greaterThan(t1,max(t1.yzx,t1.zxy)));\n    \n\tfloat tN = dot(t1,mask);\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n    \t\n\tif( tN > tF) return vec4(-1.0);\n\n\t//vec3 nor = -sign(rdd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\n\treturn vec4( max(tN,0.0), mask);\n}\n\nvec4 iBox2( in vec3 ro, in vec3 rd, in float rad ) \n{\n\t// ray-box intersection in box space\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n    vec3 mask = vec3(lessThan(t2,min(t2.yzx,t2.zxy)));\n    \n\tfloat tF = dot(t2,mask);\n\tfloat tN = max( max( t2.x, t2.y ), t2.z );\n\n\t//vec3 nor = -sign(rdd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\n\treturn vec4( max(tN,0.0), mask);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    \n    int inttime = int(time);\n    \n    vec3 cams[8]=vec3[8](\n        vec3(1.5,1.5,time*0.5),\n        vec3(2.5,2.5,time*0.5),\n        vec3(0.5,0.5,time*0.5),\n        vec3(1.5,1.5,time*0.5),\n        vec3(1.5,2.5,time*0.5),\n        vec3(1.5,1.5,time*0.5),\n        vec3(1.5,1.5,time*0.5),\n\t\tvec3(1.5,1.5,time*0.5)\n    );\n    int seeds[8]=int[8](\n        129928175,\n        4289552,\n        131285248,\n        96210799,\n        85205317,\n        262735,\n        85197125,\n        12324399\n    );\n    \n    seed1 = seeds[inttime%8];\n    seed2 = seeds[(inttime+1)%8];\n    vec3 cam1 = cams[inttime%8];\n    vec3 cam2 = cams[(inttime+1)%8];\n    \n    vec3 pos = mix(cam1,cam2,min(fract(time)*3.0,1.0));\n    vec3 dir = normalize(vec3(uv,1.0));\n    \n    vec3 localpos = mod(pos,3.0);\n    vec3 localfloor = floor(localpos);\n    vec3 floorpos = floor(pos);\n    vec3 cell = floorpos;\n    vec3 cellpos = pos-cell;\n    vec3 invdir = 1.0/abs(dir);\n    vec3 signdir = sign(dir);\n    vec3 lens = invdir*abs(signdir*0.5+0.5-fract(pos));\n    float stepsize = 1.0;\n    float realstepsize = 1.0;\n    \n    bool didhit = false;\n    \n    vec3 normal;\n    float dist = 0.0;\n    vec3 mask;\n    for (int i = 0; i < 16; i++) {\n        if (any(greaterThan(abs(localfloor-1.0),vec3(1.0)))) {\n            if (stepsize > 0.9) {\n                mask = vec3(greaterThan(abs(localfloor-1.0),vec3(1.0)));\n                localpos -= 3.0*mask*signdir;\n                localfloor -= 3.0*mask*signdir;\n                cell -= 3.0*mask*signdir;\n                cellpos -= 3.0*mask*signdir;\n            } else {\n                float num = 1.0;\n                //vec3 mask = vec3(greaterThan(abs(localfloor-1.0),vec3(1.0)));\n                /*localpos -= 3.0*mask*signdir;\n                localfloor -= 3.0*mask*signdir;\n                floorpos -= localfloor*stepsize;\n                floorpos += mask*stepsize*3.0;\n                stepsize*=3.0;\n                localpos = localpos/3.0+localfloor;*/\n                //break;\n                \n                vec4 hit = iBox2(localpos/3.0-0.5,dir,1.0/num*2.0);\n                \n                stepsize *= 3.0;\n                cell = floor(cell/stepsize)*stepsize;\n                realstepsize *= 3.0/num;\n                floorpos -= localfloor*realstepsize/3.0-hit.yzw*signdir*stepsize;\n                pos += signdir*0.001*hit.yzw;\n                localpos = mod(pos/stepsize-signdir*hit.yzw,3.0)+signdir*hit.yzw;\n\n                localfloor = floor(localpos);\n                \n            \tlens = invdir*abs(signdir*0.5+0.5-localpos+localfloor);\n                break;\n            }\n        } else {\n            \n        \tfloat num = mapf(localfloor);\n            vec4 hit = iBox(localpos-localfloor-0.5,dir,num*0.5);\n            \n            //if (map(localfloor)) {\n            if (hit.x > -0.5) {\n                \n                if (stepsize < 0.1) {didhit = true;break;}\n                pos += dir*hit.x*realstepsize;\n                localpos = ((localpos-localfloor-0.5)+dir*hit.x)/num+0.5;\n                \n                floorpos += realstepsize*0.5*(1.0-num);\n                \n                realstepsize *= num/3.0;\n                \n                stepsize /= 3.0;\n                localpos = fract(localpos+signdir*0.1*hit.yzw)-signdir*0.1*hit.yzw;\n                localpos *= 3.0;\n                localfloor = clamp(floor(localpos),0.0,2.0);\n                floorpos += localfloor*realstepsize;\n                cell += localfloor*stepsize;\n\n                lens = invdir*abs(signdir*0.5+0.5-localpos+localfloor);\n                normal = hit.yzw;\n                \n                //break;\n            } else {\n                mask = vec3(lessThan(lens,min(lens.yzx,lens.zxy)));\n\n                float len = dot(mask,lens);\n\n                lens += invdir*mask-len;\n                pos += dir*len*realstepsize;\n                floorpos += mask*signdir*realstepsize;\n                cell += mask*signdir*stepsize;\n                localpos += dir*len;\n                \n                localfloor += mask * signdir;\n                normal = mask;\n                dist += len*realstepsize;\n                //if (dist > 3.0) break;\n            }\n        }\n    }\n    \n    normal *= -signdir;\n    \n    //if (didhit) {\n\tfragColor = clamp(vec4((cellpos-cell)/3.0+0.01,1.0),0.0,1.0);\n    //fragColor = mix(fragColor,vec4(normal*0.5+0.5,1.0),vec4(0.5));\n    //}\n    //if (!didhit) fragColor = fragColor*0.2;\n    fragColor = sqrt(fragColor);\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}