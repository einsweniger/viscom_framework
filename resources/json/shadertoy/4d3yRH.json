{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "4d3yRH",
      "date": "1517907168",
      "viewed": 285,
      "name": "3D cloud tunnel",
      "username": "Txoka",
      "description": "2D version:\nhttps://www.shadertoy.com/view/lsdczr",
      "likes": 2,
      "published": 3,
      "flags": 32,
      "tags": [
        "3d",
        "tunnel",
        "cloud"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 1,
            "sampler": {
              "filter": "linear",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 258,
            "src": "/media/previz/buffer01.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "#define xDiv 2.\n//1. / 2. else it fails\n#define yDiv 2.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv=fragCoord.xy/iResolution.xy-0.5;\n    uv.x*=iResolution.x/iResolution.y;\n    vec2 t=vec2(atan(uv.x,uv.y)/3.1415926,1./length(uv));\n    t.x/=(xDiv);\n    t.y/=(yDiv);\n    float o = t.y+0.5;\n    t.y+=iTime;\n    \n    float s=sin(t.y*3.1415926*(yDiv));\n\tfragColor=mix(\n        (1.-texture(iChannel0,vec2(t.x,t.y)))/o,\n        (1.-texture(iChannel0,vec2(t.x+0.5/(xDiv),t.y)))/o,\n        smoothstep(-0.5/(xDiv),0.,-abs(t.x))+smoothstep(0.5/(xDiv),1./(xDiv),abs(t.x))\n    );\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      },
      {
        "inputs": [],
        "outputs": [
          {
            "id": 257,
            "channel": 0
          }
        ],
        "code": "void mainImage(out vec4 o,in vec2 p){\n\tp/=iResolution.xy/2.;\n    p-=1.;\n    p.x*=iResolution.x/iResolution.y;\n    \n    o=vec4(fbm(p*5.,iTime));\n}",
        "name": "Buf A",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "nearest",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 1,
            "sampler": {
              "filter": "nearest",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 258,
            "channel": 0
          }
        ],
        "code": "#define time float(iFrame)/30.\n#define zResolution 500.\n#define col texture(iChannel1,vec2(uv.x,i))\nconst  float g = 1./(zResolution);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 mouse = iMouse.xy/iResolution.xy*2.-1.;\n\tmouse.x*=iResolution.x/iResolution.y;\n\tvec2 uv= fragCoord.xy / iResolution.xy*2.-1.;\n    uv.x*=iResolution.x/iResolution.y;\n\tuv=uv/6.3;\n    uv.y+=0.43;\n\tuv.x+=0.;\n    \n    \n    for(float i=0.;i<1.;i+=g) {\n        uv*=1.+g/4.; //3 or 4 not sure.\n\t\tfloat a=texture(iChannel0,vec2(uv.x,i)).r/15.;\n        if(a<0.1-uv.y/1.+i/1.){\n            fragColor=col; //1.5 or 2 (testing) (2 better)\n            break;\n        }\n    }\n}",
        "name": "Buf B",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [],
        "outputs": [],
        "code": "float noise3D(vec3 p)\n{\n\treturn fract(sin(dot(p ,vec3(12.9898,78.233,128.852))) * 43758.5453)*2.0-1.0;\n}\n\nfloat simplex3D(vec3 p){\n    \n\tfloat f3 = 1.0/3.0;\n\tfloat s = (p.x+p.y+p.z)*f3;\n\tint i = int(floor(p.x+s));\n\tint j = int(floor(p.y+s));\n\tint k = int(floor(p.z+s));\n\t\n\tfloat g3 = 1.0/6.0;\n\tfloat t = float((i+j+k))*g3;\n\tfloat x0 = float(i)-t;\n\tfloat y0 = float(j)-t;\n\tfloat z0 = float(k)-t;\n\tx0 = p.x-x0;\n\ty0 = p.y-y0;\n\tz0 = p.z-z0;\n\t\n\tint i1,j1,k1;\n\tint i2,j2,k2;\n\t\n\tif(x0>=y0)\n\t{\n\t\tif(y0>=z0){ i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; } // X Y Z order\n\t\telse if(x0>=z0){ i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; } // X Z Y order\n\t\telse { i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; }  // Z X Z order\n\t}\n\telse \n\t{ \n\t\tif(y0<z0) { i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; } // Z Y X order\n\t\telse if(x0<z0) { i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; } // Y Z X order\n\t\telse { i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; } // Y X Z order\n\t}\n\t\n\tfloat x1 = x0 - float(i1) + g3; \n\tfloat y1 = y0 - float(j1) + g3;\n\tfloat z1 = z0 - float(k1) + g3;\n\tfloat x2 = x0 - float(i2) + 2.0*g3; \n\tfloat y2 = y0 - float(j2) + 2.0*g3;\n\tfloat z2 = z0 - float(k2) + 2.0*g3;\n\tfloat x3 = x0 - 1.0 + 3.0*g3; \n\tfloat y3 = y0 - 1.0 + 3.0*g3;\n\tfloat z3 = z0 - 1.0 + 3.0*g3;\t\n\n\tvec3 ijk0 = vec3(i,j,k);\n\tvec3 ijk1 = vec3(i+i1,j+j1,k+k1);\t\n\tvec3 ijk2 = vec3(i+i2,j+j2,k+k2);\n\tvec3 ijk3 = vec3(i+1,j+1,k+1);\t\n\n\tvec3 gr0 = normalize(vec3(noise3D(ijk0),noise3D(ijk0*2.01),noise3D(ijk0*2.02)));\n\tvec3 gr1 = normalize(vec3(noise3D(ijk1),noise3D(ijk1*2.01),noise3D(ijk1*2.02)));\n\tvec3 gr2 = normalize(vec3(noise3D(ijk2),noise3D(ijk2*2.01),noise3D(ijk2*2.02)));\n\tvec3 gr3 = normalize(vec3(noise3D(ijk3),noise3D(ijk3*2.01),noise3D(ijk3*2.02)));\n\n\tfloat n0 = 0.0;\n\tfloat n1 = 0.0;\n\tfloat n2 = 0.0;\n\tfloat n3 = 0.0;\n\n\tfloat t0 = 0.5 - x0*x0 - y0*y0 - z0*z0;\n\tif(t0>=0.0)\n\t{\n\t\tt0*=t0;\n\t\tn0 = t0 * t0 * dot(gr0, vec3(x0, y0, z0));\n\t}\n\tfloat t1 = 0.5 - x1*x1 - y1*y1 - z1*z1;\n\tif(t1>=0.0)\n\t{\n\t\tt1*=t1;\n\t\tn1 = t1 * t1 * dot(gr1, vec3(x1, y1, z1));\n\t}\n\tfloat t2 = 0.5 - x2*x2 - y2*y2 - z2*z2;\n\tif(t2>=0.0)\n\t{\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * dot(gr2, vec3(x2, y2, z2));\n\t}\n\tfloat t3 = 0.5 - x3*x3 - y3*y3 - z3*z3;\n\tif(t3>=0.0)\n\t{\n\t\tt3 *= t3;\n\t\tn3 = t3 * t3 * dot(gr3, vec3(x3, y3, z3));\n\t}\n\treturn 96.0*(n0+n1+n2+n3);\n\t\n}\nfloat fbm(vec2 p,float iTime){\n    float f=0.50000*simplex3D(vec3(iTime,p));p=p*2.01;\n    f+=0.25000*simplex3D(vec3(iTime,p));p=p*2.02;\n    f+=0.12500*simplex3D(vec3(iTime,p));p=p*2.03;\n    f+=0.06250*simplex3D(vec3(iTime,p));p=p*2.04;\n    f+=0.03125*simplex3D(vec3(iTime,p));\n\treturn f/2.+0.5;\n}\n",
        "name": "Common",
        "description": "",
        "type": "common"
      }
    ]
  }
}