{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "lljBDy",
      "date": "1517101924",
      "viewed": 432,
      "name": "Trilinear Interpolation w. Alpha",
      "username": "paniq",
      "description": "an attempt at figuring out how to trilinearly interpolate eight alphablended colors. this is an interative approach, but I hope to eventually find a closed-form solution.",
      "likes": 8,
      "published": 3,
      "flags": 0,
      "tags": [
        "blending",
        "trilinear",
        "interpolation",
        "alpha"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 28,
            "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png",
            "ctype": "texture",
            "channel": 0,
            "sampler": {
              "filter": "nearest",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "// with small optimal tweakings from @nothings\n\n// cube alpha scale & bias\n#if 1\nfloat ascale = 0.65;\nfloat abias  = 0.15;\n//#define SOLID\n#else\nfloat ascale = 0.37;\nfloat abias  = 0.14;\n#define SOLID\n#endif\n\nbool cube(vec3 org, vec3 dir, out float near, out float far) {\n    vec3 p = -org/dir;\n    vec3 q = 0.5/abs(dir);\n\tvec3 tmin = p - q;\n\tvec3 tmax = p + q;\n    near = max(tmin.x,max(tmin.y,tmin.z));\n\tfar = min(tmax.x,min(tmax.y,tmax.z));\n\treturn near < far && far > 0.0;\n}\n\n\nvoid transformray (vec3 ro, vec3 rd, mat2 rotationY, vec3 offset, out vec3 outro, out vec3 outrd)\n{\n\toutro = ro + offset;\n\toutro = vec3(rotationY * outro.xz, outro.y).xzy;\n\toutrd = vec3(rotationY * rd.xz, rd.y).xzy;\n}\n\nvec3 map_color(vec3 p) {\n    return p;\n}\n\nfloat map_alpha(vec3 p) {\n#ifndef SOLID\n    float c000 = 0.0;\n    float c010 = 1.0;\n    float c100 = 1.0;\n    float c110 = 0.0;\n    float c001 = 1.0;\n    float c011 = 0.0;\n    float c101 = 0.0;\n    float c111 = 1.0;\n#else\n    float c000 = 1.0;\n    float c010 = 1.0;\n    float c100 = 1.0;\n    float c110 = 1.0;\n    float c001 = 1.0;\n    float c011 = 1.0;\n    float c101 = 1.0;\n    float c111 = 1.0;\n#endif\n    float c00 = mix(c000, c001, p.x);\n    float c01 = mix(c010, c011, p.x);\n    float c10 = mix(c100, c101, p.x);\n    float c11 = mix(c110, c111, p.x);\n    float c0 = mix(c00, c01, p.y);\n    float c1 = mix(c10, c11, p.y);\n    float c = mix(c0, c1, p.z);    \n    return c*ascale+abias;\n}\n\nconst int N = 256;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// camera\n\tvec2 q = fragCoord.xy/iResolution.xy;\n\tvec2 p = -1.0 + 2.0 * q;\n\tp.x *= iResolution.x/iResolution.y;\n    p *= 0.55; // move camera closer\n\tvec3 camro = normalize(vec3(1.0, -0.1 + sin(iTime)*0.5+0.5, 0.0));\n\tvec3 w = -camro;\n\tcamro *= 2.5;\n\tvec3 u = normalize(cross( vec3(0.0, 1.0, 0.0), w ));\n\tvec3 v = normalize(cross(w,u));\n\tvec3 camrd = normalize(p.x * u + p.y * v + 1.5 * w);\n\tfragColor = vec4(0.0);\n\t\n\t// rotation\n\tfloat angle = 5.0 * iMouse.x / iResolution.x;\n\tif( iMouse.z < 0.5 )\n\t\tangle = iTime + 4.7;\n\tfloat ca = cos(angle);\n\tfloat sa = sin(angle);\n\tmat2  m = mat2(ca, -sa, sa, ca);\n\t\n\tfloat far, near;\n\tvec3 ro, rd;\n\t\n    vec3 c = vec3(0.0);\n    float k = 1.0;\n\t// cube\n\ttransformray(camro, camrd, m, vec3(0.0), ro, rd );\n    if (cube (ro, rd, near, far)) {\n        float d = (far - near);\n        vec3 p0 = (ro + rd * near)+0.5;\n        vec3 p1 = (ro + rd * far)+0.5;       \n        float s = 1.0/float(N);\n        // solve front to back\n        for (int i = 0; i <= N; ++i) {\n            float x = float(i)*s;\n            vec3 p = clamp(p0 + (p1 - p0)*x, vec3(0.0), vec3(1.0));\n     \t\tfloat a = map_alpha(p);\n            a = pow(a, 6.0);\n        \tvec3 col = map_color(p);\n        \tcol\t= col*col;\n            a = a*s*d*150.0;            \n            c = c + col*a*k;\n\t\t\tk = k*(1.0 - a);\n    \t}\n    }\n    c = c + (texture(iChannel0, p*2.0).rrr * 0.2 + 0.2)*k;\n    if (max(c.r,max(c.g,c.b)) > 1.0) {\n        c = vec3(1.0,0.0,0.0);\n    }\n    // sqrt is a fake lin->srgb conversion\n    fragColor = vec4(sqrt(c), 1.0);\n\t\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}