{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "XlyGDd",
      "date": "1477365228",
      "viewed": 281,
      "name": "Draw a line of YY",
      "username": "20911870",
      "description": "\u753b\u4e00\u6761\u76f4\u7ebf\u7684shader",
      "likes": 0,
      "published": 3,
      "flags": 0,
      "tags": [
        "thebookofshader"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "float impulse( float k, float x );\nfloat cubicPulse( float c, float w, float x );\nfloat expStep( float x, float k, float n );\nfloat parabola( float x, float k );\nfloat pcurve( float x, float a, float b );\n\n// Plot a line on Y using a value between 0.0-1.0\nfloat plot(vec2 st, float pct);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // \u753b\u4e00\u6761\u76f4\u7ebf\n    float y = uv.x;\n    \n    // \u753by = x^2\u7684\u56fe\u50cf\n    //float y = pow(uv.x, 2.0);\n    \n    // \u753by = 0(x <= 0.5) && y = 1(x > 0.5)\u7684\u56fe\u50cf\n\t//float y = step(0.5, uv.x);\n    \n    // \u753by\u57280.1\u548c9\uff0c9\u4e4b\u95f4\u5e73\u6ed1\u63d2\u503c\u7684\u56fe\u50cf\n    //float y = smoothstep(0.1, 0.9, uv.x);\n    \n    // \u753b\u4e00\u4e2a\u6ce2\u5cf0\uff0c\u6ce2\u8303\u56f4\u4e3a[0.2,0.8],\u6ce2\u5cf0\u4e3a0.5\n    //float y = smoothstep(0.2,0.5,uv.x) - smoothstep(0.5,0.8,uv.x);\n    \n    // \u6b63\u5f26\u51fd\u6570\n    //float y = (sin(20. * uv.x) + 1.) / 2.;\n    \n    // \u4f59\u5f26\u51fd\u6570\n    //float y = (cos(20. * uv.x) + 1.) / 2.;\n    \n    // \u6b63\u5f26\u51fd\u6570\u622a\u53d6\u5c0f\u6570\u90e8\u5206 fract()\n    //float y = (fract(sin(20. * uv.x))) / 2. + 0.25;\n    \n    // \u6b63\u5f26\u51fd\u6570\u5411\u6b63\u65e0\u7a77\u53d6\u6574 ceil()\n    //float y = (ceil(sin(20. * uv.x))) / 2. + 0.25;\n    \n    // \u6b63\u5f26\u51fd\u6570\u5411\u6b63\u8d1f\u7a77\u53d6\u6574 floor()\n    //float y = (floor(sin(20. * uv.x))) / 2. + 0.25;\n    \n    // Impulse\n    //float y = impulse(12., uv.x);\n    \n    // Cubic Pulse\n    //float y = cubicPulse(0.5, 0.2, uv.x);\n    \n    // Exponential Step\n    //float y = expStep(st.x,10.,1.0);\n    \n    // Parabola\n    //float y = parabola(uv.x,1.0);\n    \n    // Power Curve\n    //float y = pcurve(uv.x,3.0,1.0);\n    \n    // \u4e0a\u65b9\u7684\u989c\u8272\u4e3a\u5047\u5f69\u8272\u56fe\u50cf\uff0c\u53ef\u7528\u4e8e\u8c03\u8bd5\n    //vec3 color = vec3(y);\n    vec3 color = vec3(0.0);\n    \n    // Plot a line\n    float pct = plot(uv, y);\n    color = (1.0-pct)*color+pct*vec3(0.0,1.0,0.0);\n    \n    fragColor = vec4(color,1.0);\n}\n\nfloat plot(vec2 st, float pct){\n    return  smoothstep( pct-0.02, pct, st.y) - \n          smoothstep( pct, pct+0.02, st.y);\n}\n\nfloat impulse( float k, float x ){\n    float h = k*x;\n    return h*exp(1.0-h);\n}\n\nfloat cubicPulse( float c, float w, float x ){\n    x = abs(x - c);\n    if( x>w ) return 0.0;\n    x /= w;\n    return 1.0 - x*x*(3.0-2.0*x);\n}\n\nfloat expStep( float x, float k, float n ){\n    return exp( -k*pow(x,n) );\n}\n\nfloat parabola( float x, float k ){\n    return pow( 4.0*x*(1.0-x), k );\n}\n\nfloat pcurve( float x, float a, float b ){\n    float k = pow(a+b,a+b) / (pow(a,a)*pow(b,b));\n    return k * pow( x, a ) * pow( 1.0-x, b );\n}\n\n",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}