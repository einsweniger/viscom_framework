{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "MlByzR",
      "date": "1507134418",
      "viewed": 363,
      "name": "ReactionDiffusion 3",
      "username": "aiekick",
      "description": "Reaction Diffusion 3",
      "likes": 16,
      "published": 3,
      "flags": 32,
      "tags": [
        "diffusion",
        "3",
        "reaction"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "vec2 cell(vec2 fragCoord, vec2 pixel)\n{\n    // remove screen border of domain\n    if (fragCoord.x + pixel.x > iResolution.x) fragCoord.x = 0.;\n    if (fragCoord.y + pixel.y > iResolution.y) fragCoord.y = 0.;\n    if (fragCoord.x + pixel.x < 0.0) fragCoord.x = iResolution.x;\n    if (fragCoord.y + pixel.y < 0.0) fragCoord.y = iResolution.y;\n    \n\tvec2 uv = (fragCoord + pixel) / iResolution.xy / 1.;\n    //uv += iTime * 0.02;\n    //uv = mod(uv * 2., 1.);// for repeat the texture\n    \n    return texture(iChannel0, uv / ZOOM).rg;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float a = mod(iTime,3.14159*2.);\n    \n    // thanks to shane for this lighting model\n\n    float c = cell(fragCoord, vec2(0,0)).g;\n    float c2 = cell(fragCoord, vec2(-1)/*vec2(cos(a),sin(a))*/).g;\n    \n    vec3 col = vec3(1)*c*c*1.5;\n    col += vec3(.2, .4, 1)*max(c2*c2*c2 - c*c*c, 0.0)*iResolution.y*.2;\n    \n    fragColor = sqrt(vec4(col, 1.));\n}\n",
        "name": "Image",
        "description": "",
        "type": "image"
      },
      {
        "inputs": [
          {
            "id": 16,
            "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png",
            "ctype": "texture",
            "channel": 1,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 260,
            "src": "/media/previz/buffer03.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 257,
            "channel": 0
          }
        ],
        "code": "// based on the tuto here : http://www.karlsims.com/rd.html\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    fragColor = vec4(0,0,0,0);\n\t\n   \tif (iFrame < 30)\n    {\n        uv = (fragCoord*2. - iResolution.xy / ZOOM)/iResolution.y / ZOOM;\n    \tif (length(uv) < 0.05)\n\t\t\tfragColor = mix(vec4(0,1,0,1), vec4(1,0,0,1), length(uv)); \n    }\n    else if (iMouse.z > 0.0)\n\t{\n\t\tvec2 mo = iMouse.xy / iResolution.xy / ZOOM;\n    \tfragColor = texture(iChannel0, uv);\n        if (length(uv-mo) < 0.003)\n\t\t\tfragColor = mix(vec4(0,1,0,1), vec4(1,0,0,1), length(uv-mo)); \n\t}\n    else\n    {\n        float a = float(iFrame) * 0.1;\n        \n\t\tvec2 dir = normalize(vec2(a+cos(a),a-sin(a)));\n        \n        dir = vec2(1);\n        \n        vec2 diffusionCoef = vec2(1,.3);\n        float feedCoef = FEED_RATE;\n        float killCoef = KILL_RATE;\n        //killCoef = 0.0362+(fragCoord.y/9000.0)*(sin(iTime/1.0)+1.0);\n            \n        vec2 ab = cell(fragCoord, vec2(0,0), vec2(0,0), 1., iChannel0, iResolution.xy);\n        vec2 lp = laplacian2D(fragCoord, dir, .5, .5, iChannel0, iResolution.xy);\n        //vec2 lp2 = laplacian2D(fragCoord, dir, .2, .8);\n        \n        //lp = mix(lp, lp2, cos(uv.x*uv.y) *0.5+0.5);\n        \n        float reaction = ab.x * ab.y * ab.y;\n        vec2 diffusion = diffusionCoef * lp;\n        float feed = feedCoef * (1. - ab.x);\n        float kill = (feedCoef + killCoef) * ab.y;\n        \n        ab += diffusion + vec2(feed - reaction, reaction - kill);\n        \n    \tfragColor = vec4(clamp(ab,0.,1e4),0.0,1.0);\n    }\n}\n\n",
        "name": "Buf A",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 258,
            "channel": 0
          }
        ],
        "code": "// based on the tuto here : http://www.karlsims.com/rd.html\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    //vec2 mo = iMouse.xy / iResolution.xy;\n    \n    {\n        float a = float(iFrame) * 0.1;\n        \n\t\tvec2 dir = normalize(vec2(a+cos(a),a-sin(a)));\n        \n        dir = vec2(1);\n        \n        vec2 diffusionCoef = vec2(1,.3);\n        float feedCoef = FEED_RATE;\n        float killCoef = KILL_RATE;\n        //killCoef = 0.0362+(fragCoord.y/9000.0)*(sin(iTime/1.0)+1.0);\n            \n        vec2 ab = cell(fragCoord, vec2(0,0), vec2(0,0), 1., iChannel0, iResolution.xy);\n        vec2 lp = laplacian2D(fragCoord, dir, .5, .5, iChannel0, iResolution.xy);\n        //vec2 lp2 = laplacian2D(fragCoord, dir, .2, .8);\n        \n        //lp = mix(lp, lp2, cos(uv.x*uv.y) *0.5+0.5);\n        \n        float reaction = ab.x * ab.y * ab.y;\n        vec2 diffusion = diffusionCoef * lp;\n        float feed = feedCoef * (1. - ab.x);\n        float kill = (feedCoef + killCoef) * ab.y;\n        \n        ab += diffusion + vec2(feed - reaction, reaction - kill);\n        \n    \tfragColor = vec4(clamp(ab,0.,1e4),0.0,1.0);\n    }\n}\n\n",
        "name": "Buf B",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [
          {
            "id": 258,
            "src": "/media/previz/buffer01.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 259,
            "channel": 0
          }
        ],
        "code": "// based on the tuto here : http://www.karlsims.com/rd.html\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    //vec2 mo = iMouse.xy / iResolution.xy;\n    \n    {\n        float a = float(iFrame) * 0.1;\n        \n\t\tvec2 dir = normalize(vec2(a+cos(a),a-sin(a)));\n        \n        dir = vec2(1);\n        \n        vec2 diffusionCoef = vec2(1,.3);\n        float feedCoef = FEED_RATE;\n        float killCoef = KILL_RATE;\n        //killCoef = 0.0362+(fragCoord.y/9000.0)*(sin(iTime/1.0)+1.0);\n            \n        vec2 ab = cell(fragCoord, vec2(0,0), vec2(0,0), 1., iChannel0, iResolution.xy);\n        vec2 lp = laplacian2D(fragCoord, dir, .5, .5, iChannel0, iResolution.xy);\n        //vec2 lp2 = laplacian2D(fragCoord, dir, .2, .8);\n        \n        //lp = mix(lp, lp2, cos(uv.x*uv.y) *0.5+0.5);\n        \n        float reaction = ab.x * ab.y * ab.y;\n        vec2 diffusion = diffusionCoef * lp;\n        float feed = feedCoef * (1. - ab.x);\n        float kill = (feedCoef + killCoef) * ab.y;\n        \n        ab += diffusion + vec2(feed - reaction, reaction - kill);\n        \n    \tfragColor = vec4(clamp(ab,0.,1e4),0.0,1.0);\n    }\n}\n\n",
        "name": "Buf C",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [
          {
            "id": 259,
            "src": "/media/previz/buffer02.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 260,
            "channel": 0
          }
        ],
        "code": "// based on the tuto here : http://www.karlsims.com/rd.html\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    //vec2 mo = iMouse.xy / iResolution.xy;\n    \n    {\n        float a = float(iFrame) * 0.1;\n        \n\t\tvec2 dir = normalize(vec2(a+cos(a),a-sin(a)));\n        \n        dir = vec2(1);\n        \n        vec2 diffusionCoef = vec2(1,.3);\n        float feedCoef = FEED_RATE;\n        float killCoef = KILL_RATE;\n        //killCoef = 0.0362+(fragCoord.y/9000.0)*(sin(iTime/1.0)+1.0);\n            \n        vec2 ab = cell(fragCoord, vec2(0,0), vec2(0,0), 1., iChannel0, iResolution.xy);\n        vec2 lp = laplacian2D(fragCoord, dir, .5, .5, iChannel0, iResolution.xy);\n        //vec2 lp2 = laplacian2D(fragCoord, dir, .2, .8);\n        \n        //lp = mix(lp, lp2, cos(uv.x*uv.y) *0.5+0.5);\n        \n        float reaction = ab.x * ab.y * ab.y;\n        vec2 diffusion = diffusionCoef * lp;\n        float feed = feedCoef * (1. - ab.x);\n        float kill = (feedCoef + killCoef) * ab.y;\n        \n        ab += diffusion + vec2(feed - reaction, reaction - kill);\n        \n    \tfragColor = vec4(clamp(ab,0.,1e4),0.0,1.0);\n    }\n}\n\n",
        "name": "Buf D",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [],
        "outputs": [],
        "code": "#define FEED_RATE 0.05\n#define KILL_RATE 0.062\n#define ZOOM 2.0\n\nvec2 cell(vec2 fragCoord, vec2 pixel, vec2 dir, float scale, sampler2D sam, vec2 size)\n{\n    pixel *= dir;\n    \n    // remove screen border of domain\n    if (fragCoord.x + pixel.x > size.x) fragCoord.x = 0.;\n    if (fragCoord.y + pixel.y > size.y) fragCoord.y = 0.;\n    if (fragCoord.x + pixel.x < 0.0) fragCoord.x = size.x;\n    if (fragCoord.y + pixel.y < 0.0) fragCoord.y = size.y;\n    \n\tvec2 uv = (fragCoord + pixel) / size.xy;\n    return texture(sam, uv).rg * scale;\n}\n\nvec2 laplacian2D(vec2 fragCoord, vec2 dir, float a, float b, sampler2D sam, vec2 size) \n{\n    float st = 1.;\n    a /= 4.;\n    b /= 4.;\n    return \n        cell(fragCoord, vec2(0., -st), dir, a, sam, size) +\n        cell(fragCoord, vec2(0., st), dir, a, sam, size) +\n        cell(fragCoord, vec2(st, 0.), dir, a, sam, size) +\n        cell(fragCoord, vec2(-st, 0.), dir, a, sam, size) +\n        cell(fragCoord, vec2(-st, -st), dir, b, sam, size) +\n        cell(fragCoord, vec2(-st, st), dir, b, sam, size) +\n        cell(fragCoord, vec2(st, -st), dir, b, sam, size) +\n        cell(fragCoord, vec2(st, st), dir, b, sam, size) -\n        cell(fragCoord, vec2(0., 0.), dir, 1., sam, size);\n}",
        "name": "Common",
        "description": "",
        "type": "common"
      }
    ]
  }
}