{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "ltlcz8",
      "date": "1503489222",
      "viewed": 210,
      "name": "Ray marching mytest",
      "username": "stratego",
      "description": "Demo for http://alchemist-lab.blogspot.ru/2017/08/ray-marching.html",
      "likes": 0,
      "published": 3,
      "flags": 0,
      "tags": [
        "raymarching"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "// Round Box\nfloat udRoundBox( vec3 pos, vec3 b, float r )\n{\n  return length(max(abs(pos)-b, 0.0))-r;\n}\n\nfloat sceneSDF(vec3 pos)\n{\n    // \u0422\u0443\u0442 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432\n    // \u0418 \u0434\u0430\u0436\u0435 \u0438\u0445 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 (\u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u0435, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0438 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c)\n    return udRoundBox(pos, vec3(.5, .5, 0.2), 0.3);\n}\n\n// \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u0430\u0433\u043e\u0432\n#define MAX_MARCHING_STEPS 250\n// \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0438\u0441\u0442\u0430\u043d\u0446\u0438\u044f\n#define MIN_DIST 0.0\n#define MAX_DIST 100.0\n//\n#define EPSILON  0.0001\n\n// eye - \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0442\u0435\u043b\u044f\n// rayDirection - \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043b\u0443\u0447\u0430\nfloat rayMarching(vec3 eye, vec3 rayDirection)\n{\n    float depth = MIN_DIST;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++)\n    {\n        // \u041e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f, \u043d\u0430\u0448\u0435\u0439 \u0441\u0446\u0435\u043d\u044b\n        float dist = sceneSDF(eye + depth * rayDirection);\n        // \u041c\u044b \u0434\u043e\u0441\u0442\u0438\u0433\u043b\u0438 \u043f\u043e\u0432\u0435\u0440\u0445\u043d\u043e\u0441\u0442\u0438\n        if (dist < EPSILON)\n\t\treturn depth;\n        // \u041f\u0440\u043e\u0434\u0432\u0438\u0433\u0430\u0435\u043c\u0441\u044f \u0434\u0430\u043b\u044c\u0448\u0435 \u043f\u043e \u043b\u0443\u0447\u0443\n        depth += dist;\n        // \u041b\u0443\u0447 \u043d\u0435 \u0441\u0442\u043e\u043b\u043a\u043d\u0443\u043b\u0441\u044f \u0441 \u043f\u043e\u0432\u0435\u0440\u0445\u043d\u043e\u0441\u0442\u044c\u044e\n        if (depth >= MAX_DIST)\n            return MAX_DIST;\n\n    }\n    return MAX_DIST;\n}\n\n// \u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043b\u0443\u0447\u0430\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord)\n{\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\n// \u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u043d\u043e\u0440\u043c\u0430\u043b\u0438\nvec3 estimateNormal(vec3 p)\n{\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\n\n// \u041e\u0441\u0432\u0435\u0449\u0435\u043d\u0438\u0435 \u043f\u043e \u0444\u043e\u043d\u0433\u0443\n// \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 https://en.wikipedia.org/wiki/Phong_reflection_model#Description\nvec3 phongLight(vec3 k_d, vec3 k_s, float shininess, vec3 p, vec3 eye, vec3 lightPos, vec3 lightIntensity)\n{\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n\n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n\n    if (dotLN < 0.0) {\n        // \u0421 \u044d\u0442\u043e\u0439 \u0442\u043e\u0447\u043a\u0438 \u043f\u043e\u0432\u0435\u0440\u0445\u043d\u043e\u0441\u0442\u0438 \u043d\u0435 \u0432\u0438\u0434\u043d\u043e \u0441\u0432\u0435\u0442\u0430\n        return vec3(0.0, 0.0, 0.0);\n    }\n\n    if (dotRV < 0.0) {\n        // \u041e\u0442\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043e\u043f\u043e\u043b\u043e\u0436\u043d\u043e\u043c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0442 \u0437\u0440\u0438\u0442\u0435\u043b\u044f\n        // \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c  \u0434\u0438\u0444\u0443\u0437\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\n        return lightIntensity * (k_d * dotLN);\n    }\n\n    //\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, shininess));\n}\n\n// \u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u0432\u0438\u0434\u0430\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up)\n{\n    // Based on gluLookAt man page\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(-f, 0.0),\n        vec4(0.0, 0.0, 0.0, 1)\n    );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t    \n    vec3 viewDir = rayDirection(45.0, iResolution.xy, fragCoord.xy);\n    vec3 eye = vec3(8.0, 5.0, 7.0);\n    // \u041f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043a \u041c\u0438\u0440\u043e\u0432\u044b\u043c \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c\n    mat4 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    // \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0434\u0438\u0441\u0442\u0430\u043d\u0446\u0438\u044e\n    vec3 worldDir = (viewToWorld * vec4(viewDir, 0.0)).xyz;\n    // \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043d\u0430\u0448 \u043b\u0443\u0447\n    float dist = rayMarching(eye, worldDir);\n\n    if (dist > MAX_DIST - EPSILON)\n        discard; //  \u041d\u0435 \u0440\u0438\u0441\u0443\u0435\u043c\n\n    // \u0421\u0430\u043c\u0430\u044f \u0431\u043b\u0438\u0437\u043a\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u0434\u043e\u043b\u044c \u043b\u0443\u0447\u0430\n    vec3 p = eye + dist * worldDir;\n\n    // \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0441\u0432\u0435\u0449\u0435\u043d\u0438\u044f\n    const vec3 K_a = vec3(0.2, 0.2, 0.2); // Ambient color\n    const vec3 K_d = vec3(1.0, 0.0, 0.0); // Diffuse color\n    const vec3 K_s = vec3(1.0, 1.0, 1.0); // Specular color\n    const float Shininess = 10.0; //\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * K_a;\n    // \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0441\u0432\u0435\u0442\u0430\n    vec3 lightPos = vec3(4.0 * sin(iTime),\n                          2.0,\n                          4.0 * cos(iTime));\n    vec3 lightIntensity = vec3(0.4, 0.4, 0.4);\n    color += phongLight(K_d, K_s, Shininess, p, eye, lightPos, lightIntensity);\n\n    // \u0420\u0438\u0441\u0443\u0435\u043c \u043a\u0440\u0430\u0441\u043d\u044b\u043c\n    fragColor = vec4(color, 1.0);\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}