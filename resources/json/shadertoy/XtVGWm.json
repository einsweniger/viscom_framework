{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "XtVGWm",
      "date": "1474987257",
      "viewed": 283,
      "name": "Raymarched Glass Object",
      "username": "Imsure1200q_1UWE130",
      "description": "Glass Object",
      "likes": 1,
      "published": 3,
      "flags": 32,
      "tags": [
        "raymarching"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float X = iMouse.x / iResolution.x;\n    float Y = iMouse.y / iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      },
      {
        "inputs": [
          {
            "id": 6,
            "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg",
            "ctype": "texture",
            "channel": 0,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 258,
            "src": "/media/previz/buffer01.png",
            "ctype": "buffer",
            "channel": 1,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 257,
            "channel": 0
          }
        ],
        "code": "float sphere(vec3 ro, float t, vec3 rd, vec3 pos, float s)\n{\n    return length((vec3((ro.x+pos.x)+t*rd.x,\n                                    (ro.y+pos.y)+t*rd.y,\n                                    (ro.z+pos.z)+t*rd.z))) - s;\n}\nfloat diamond(vec3 ro, float t, vec3 rd, vec3 pos, float s)\n{\n    return length(sqrt(abs(vec3((ro.x+pos.x)+t*rd.x,\n                                    (ro.y+pos.y)+t*rd.y,\n                                    (ro.z+pos.z)+t*rd.z)))) - s;\n}\nfloat star(vec3 ro, float t, vec3 rd, vec3 pos, float s)\n{\n    return length(sqrt(sqrt(abs(vec3((ro.x+pos.x)+t*rd.x,\n                                    (ro.y+pos.y)+t*rd.y,\n                                    (ro.z+pos.z)+t*rd.z)))))-s-0.5;\n}\nfloat C( float d1, float d2 )\n{\n    return min(d1,d2);\n}\nfloat S( float d1, float d2 )\n{\n    return max(-d1, d2);\n}\nfloat map(vec3 ro, vec3 rd, float t, float s, vec3 pos)\n{\n    return sphere(ro, t, rd, pos, s);   \n}\nfloat trace(vec3 ro, vec3 rd, vec3 pos, float s)\n{\n    float t = 0.0;\n    for(int i = 0; i < 48; i++)\n    {\n        float d = map(ro, rd, t, s, pos);\n        t += d * 0.5;\n        if(t > 0.0001 && normalize(d) > 1.0)\n        { t -= length(sqrt(d));\n        }\n    }\n    return t;\n}\nfloat addShape( vec2 fragCoord, vec3 pos, float size )\n{\n    float X = iMouse.x / iResolution.x;\n    float Y = iMouse.y / iResolution.y;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 rd = normalize(vec3(uv, 1.0));\n    vec3 ro = vec3(X, Y, -3.0);\n    float t = trace(ro, rd, pos, size);\n    float fog = 1.0/(1.0+t*t*0.1);\n    float colX = fog;\n    return colX;\n}\nvoid mainImage(out vec4 O, in vec2 U)\n{\n    vec2 uv = U / iResolution.xy;\n    float sphere1 = addShape(U, vec3(cos(iTime)*2.0, sin(iTime)*2.0, -3.0), 3.0);\n    float sphere2 = addShape(U, vec3(cos(iTime)*2.0-1., sin(iTime)*2.0+1., -3.0), 3.0);\n    float sp1 = C(sphere1, sphere2);\n    float shadow = sp1 / length(distance(dot(uv.x*2.0-1.0,uv.y*2.0-1.0), sp1));\n    \n    //Ground Shaping\n    \n    //float ground = addShape( U, vec3(0.0, 5.0, -5.0), 8.0);//  /~~~--------------------------------|\n    //vec4 effectG = vec4(ground);//                             \\~~~--------------------------------|\n    O = vec4(dot(                                   //                                               |\n        texture(iChannel0, vec2(sp1)).r,          //                                               |\n        texture(iChannel0, vec2(shadow*sp1)).r    //                                               |\n    )/length(sp1))/(                                //                                               |\n        vec4(cos(uv.y)) - vec4(0.025, 0.1, 0.2, 1.0));//                                             |\n    if(O.r > 0.9)                                   //                                               |\n    {                                               //                                               |\n        O = vec4(0.0);                              //                                               \\_\n        if(length(uv.y/(sp1+0.2))/*-effectG.r*/ < 0.5)//Only enable \"-effectG.r\" If You Enabled These /\n        {\n        O += texture(iChannel0, vec2(sp1-0.2)+uv);\n        }\n        else if(length(uv.y/(sp1+0.2)) > 0.5)\n        {\n            O += texture(iChannel1, vec2(sp1)+uv); \n        }\n        //Choices for iChannel0:\n        //1. The Wood Texture (NOT THE PEACH / APRICOT BRICK!) [Recommended For HD Glass Effects.]\n        //2. Buffer C (Light Oak Wood Texture)\n    }\n}",
        "name": "Buf A",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [
          {
            "id": 28,
            "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png",
            "ctype": "texture",
            "channel": 0,
            "sampler": {
              "filter": "nearest",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 258,
            "channel": 0
          }
        ],
        "code": "void mainImage( out vec4 O, in vec2 U )\n{\n    vec2 uv = U / iResolution.xy;\n    O = vec4(cos(uv.y))+vec4(-0.025, 0.025, 0.6, 1.0);\n}",
        "name": "Buf B",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [
          {
            "id": 6,
            "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg",
            "ctype": "texture",
            "channel": 0,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 259,
            "channel": 0
          }
        ],
        "code": "float sphere(vec3 ro, float t, vec3 rd, vec3 pos, float s)\n{\n    return length((vec3((ro.x+pos.x)+t*rd.x,\n                                    (ro.y+pos.y)+t*rd.y,\n                                    (ro.z+pos.z)+t*rd.z))) - s;\n}\nfloat diamond(vec3 ro, float t, vec3 rd, vec3 pos, float s)\n{\n    return length(sqrt(abs(vec3((ro.x+pos.x)+t*rd.x,\n                                    (ro.y+pos.y)+t*rd.y,\n                                    (ro.z+pos.z)+t*rd.z)))) - s;\n}\nfloat star(vec3 ro, float t, vec3 rd, vec3 pos, float s)\n{\n    return length(sqrt(sqrt(abs(vec3((ro.x+pos.x)+t*rd.x,\n                                    (ro.y+pos.y)+t*rd.y,\n                                    (ro.z+pos.z)+t*rd.z)))))-s-0.5;\n}\nfloat map(vec3 ro, vec3 rd, float t, float s, vec3 pos)\n{\n    return sphere(ro, t, rd, pos, s);   \n}\nfloat trace(vec3 ro, vec3 rd, vec3 pos, float s)\n{\n    float t = 0.0;\n    for(int i = 0; i < 48; i++)\n    {\n        float d = map(ro, rd, t, s, pos);\n        t += d * 0.5;\n        if(t > 0.0001 && normalize(d) > 1.0)\n        { t -= length(sqrt(d));\n        }\n    }\n    return t;\n}\nfloat addShape( vec2 fragCoord, vec3 pos, float size )\n{\n    float X = iMouse.x / iResolution.x;\n    float Y = iMouse.y / iResolution.y;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 rd = normalize(vec3(uv, 1.0));\n    vec3 ro = vec3(X, Y, -3.0);\n    float t = trace(ro, rd, pos, size);\n    float fog = 1.0/(1.0+t*t*0.1);\n    float colX = fog;\n    return colX;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ground = addShape( fragCoord, vec3(0.0, 5.0, -5.0), 8.0);\n    fragColor = vec4(ground)+texture(iChannel0, vec2(ground));\n}",
        "name": "Buf C",
        "description": "",
        "type": "buffer"
      }
    ]
  }
}