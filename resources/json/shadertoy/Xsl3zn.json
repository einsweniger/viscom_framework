{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "Xsl3zn",
      "date": "1361923265",
      "viewed": 5294,
      "name": "Warping - texture",
      "username": "iq",
      "description": "Using a texture's range to deform its own domain",
      "likes": 27,
      "published": 3,
      "flags": 0,
      "tags": [
        "2d",
        "warping"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 9,
            "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg",
            "ctype": "texture",
            "channel": 0,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "false",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 0.5*fragCoord/iResolution.xy;\n\n\tfloat d = length(uv);\n\tvec2 st = uv*0.1 + 0.2*vec2(cos(0.071*iTime+d),\n\t\t\t\t\t\t\t\tsin(0.073*iTime-d));\n\n    vec3 col = texture( iChannel0, st ).xyz;\n\tcol *= col.x*2.0;\n\tcol *= 1.0 - texture( iChannel0, 0.4*uv + 0.1*col.xy  ).xyy;\n\tcol *= 1.0 + 2.0*d;\n    \n\tfragColor = vec4( col, 1.0 );\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}