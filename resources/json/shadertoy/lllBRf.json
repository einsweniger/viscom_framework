{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "lllBRf",
      "date": "1512777003",
      "viewed": 266,
      "name": "tracking van damme (almost free)",
      "username": "FabriceNeyret2",
      "description": "Compute moments and covariant matrix of Van Damme in order to track him. \nNB: we track the flesh parts: see bottom inset.  Top inset: Recentered rescaled.\n\nAlmost free using MIPmap.\n",
      "likes": 9,
      "published": 3,
      "flags": 32,
      "tags": [
        "tracking",
        "quadratic",
        "integration",
        "fitting",
        "moments",
        "covariant",
        "gpmipmap"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 258,
            "src": "/media/previz/buffer01.png",
            "ctype": "buffer",
            "channel": 1,
            "sampler": {
              "filter": "mipmap",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": 259,
            "src": "/media/previz/buffer02.png",
            "ctype": "buffer",
            "channel": 2,
            "sampler": {
              "filter": "mipmap",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "// --- tracking a grouped object using the moments in the image\n// almost free version (thanks MIPmap) of https://shadertoy.com/view/XtG3WK\n\n#define A(ch)  textureLod(ch, vec2(.5), 99.)     // get the sum on the whole image\n    \nvoid mainImage( out vec4 O,  vec2 U )\n{\n    float I = A(iChannel1).z, r, det;            // I average\n    vec2  R = iResolution.xy, u = U / R,\n          M = A(iChannel1).xy / I,               // shape barycenter: E(x),E(y)\n         M2 = A(iChannel2).xy / I;               // M2 matrix: E(xx), E(yy)\n          r = A(iChannel2).z  / I;               //            E(xy)\n\n\tM2 = M2 - M*M; r = r - M.x*M.y;              // centered moments\n  //mat2 cov = mat2(M2.x, r, r, M2.y),           // covariant matrix\n  //    icov = inverse( cov );\n    det = M2.x*M2.y-r*r ;\n    mat2 icov = mat2(M2.y, -r, -r, M2.x) / det;  // inverse\n    \n    O = texture(iChannel0, u );                               // draw image\n    u *= 5.; if (fract(u)==u) O = texture(iChannel0, u).aaaa; // draw stencil (flech)\n    U -= M;  if (dot( U, icov * U ) < 5. ) O.r++;             // draw covariant ellips ( quadratic form )\t\n    u.y-=4.; if (u.x<1.&&u.y>0.) O = texture(iChannel0, M/R+(u-.5)*6.*(sqrt(M2.x)+sqrt(M2.y))/2./sqrt(R.x*R.y) ).aaaa;\n  //u.y-=4.; if (fract(u)==u) O = texture(iChannel0, M/R+(u-.5)*15./sqrt(5.*R.x*R.y*M2.yx/det) ).aaaa;\n}                                                             // recentered rescaled",
        "name": "Image",
        "description": "",
        "type": "image"
      },
      {
        "inputs": [
          {
            "id": 36,
            "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm",
            "ctype": "video",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 257,
            "channel": 0
          }
        ],
        "code": "// --- source video\n\nvoid mainImage( out vec4 O,  vec2 U ) {\n    U /= iResolution.xy;\n    O   = texture(iChannel0,U);            // source image\n    O.a = 5.*max(0., O.r - O.g );          // stencil to analyze ( ~= flech )\n}",
        "name": "Buf A",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "nearest",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 258,
            "channel": 0
          }
        ],
        "code": "// --- compute M1 moments E(x),E(y) and M0=E(I) in ultimate MIPmap LOD. (M1 to be normalized by M0) \n\nvoid mainImage( out vec4 O, vec2 U ) {\n    O = vec4( U, 1, 0 ) * texture(iChannel0,U/iResolution.xy ).a;\n}",
        "name": "Buf B",
        "description": "",
        "type": "buffer"
      },
      {
        "inputs": [
          {
            "id": 257,
            "src": "/media/previz/buffer00.png",
            "ctype": "buffer",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 259,
            "channel": 0
          }
        ],
        "code": "// --- compute M2 matrix E(xx),E(yy),E(xy) in ultimate MIPmap LOD (to be normalized by Imean)\n\nvoid mainImage( out vec4 O, vec2 U ) {   \n    O = vec4( U*U, U.x*U.y, 0 ) * texture(iChannel0,U/iResolution.xy).a;\n}",
        "name": "Buf C",
        "description": "",
        "type": "buffer"
      }
    ]
  }
}