{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "Xsf3Dr",
      "date": "1366995581",
      "viewed": 2939,
      "name": "Texture - HW interpolation",
      "username": "iq",
      "description": "HW linear interpolation vs manual interpolation. Depending on your display the two might or might not look the same. However, taking derivatives highlights the problem - HW interpolation does not produce the expected constant derivative.",
      "likes": 12,
      "published": 3,
      "flags": 0,
      "tags": [
        "2d",
        "interpolation",
        "hw"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 16,
            "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png",
            "ctype": "texture",
            "channel": 0,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "false",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "// The MIT License\n// Copyright \u00a9 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//\n//\n// HW linear interpolation vs manual interpolation. \n//\n// Depending on your display the two might or might look to be similar or\n// even the same. However, taking derivatives  highlights the problem: HW \n// interpolation does not produce the expected constant derivative, but a \n// series of discrete jumps.\n//\n// You can undefine the USE8BIT below and check that indeed HW is using 8 \n// bit point arighmetic.\n\n\n//#define USE8BIT\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy;\n\t\n\t// texture resolution\n\tfloat texRes = 64.0;\n\t\n\t// pixel under examination\n    vec2 pixOff = vec2(430.5,40.5)/texRes;\n\t\n    // linear interpolation done by the hardware\t\n\tvec3 c = texture( iChannel0, pixOff+vec2(p.x/texRes,0.0) ).xyz;\n\n\t// linear interpolation made by hand\n\tvec3 d = mix( texture( iChannel0, pixOff+vec2(0.0/texRes,0.0) ).xyz, \n\t\t\t\t  texture( iChannel0, pixOff+vec2(1.0/texRes,0.0) ).xyz, \n#ifdef USE8BIT\n                  floor(p.x*256.0-0.5)/256.0\t );\n#else\n\t\t\t\t  p.x );\n#endif\n\n\t// compare both. upper half: HW, lower half: manual\n\tvec3 r = c; if( p.y<0.5 ) r=d;\n\t\n    // show derivatives\n\tif( abs(p.y-0.5)>0.3 ) r = 2.0*abs(dFdx(r))*iResolution.x;\n\t\n\tr *= smoothstep( 0.002, 0.004, abs(p.y-0.5) );\n\tr *= smoothstep( 0.002, 0.004, abs(p.y-0.2) );\n\tr *= smoothstep( 0.002, 0.004, abs(p.y-0.8) );\n\t\n\tfragColor = vec4(r,1.0);\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}