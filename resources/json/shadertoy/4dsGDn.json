{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "4dsGDn",
      "date": "1367507790",
      "viewed": 1045,
      "name": "Chromatic Aberration Filter",
      "username": "4rknova",
      "description": "A simple chromatic aberration effect.",
      "likes": 23,
      "published": 3,
      "flags": 0,
      "tags": [
        "interlaced",
        "chromatic",
        "aberration"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 11,
            "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv",
            "ctype": "video",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "// by Nikos Papadopoulos, 4rknova / 2014\n// Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat hash(in float n) { return fract(sin(n)*43758.5453123); }\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec4 c0 = texture(iChannel0,fragCoord.xy/iResolution.xy);\n\t\n\t\n\tfloat t = pow((((1. + sin(iTime * 10.) * .5)\n\t\t *  .8 + sin(iTime * cos(fragCoord.y) * 41415.92653) * .0125)\n\t\t * 1.5 + sin(iTime * 7.) * .5), 5.);\n\t\n\tvec4 c1 = texture(iChannel0, fragCoord.xy/(iResolution.xy+vec2(t * .2,.0)));\n\tvec4 c2 = texture(iChannel0, fragCoord.xy/(iResolution.xy+vec2(t * .5,.0)));\n\tvec4 c3 = texture(iChannel0, fragCoord.xy/(iResolution.xy+vec2(t * .9,.0)));\n\t\n    float noise = hash((hash(fragCoord.x) + fragCoord.y) * iTime) * .055;\n    \n\tfragColor = vec4(vec3(c3.r, c2.g, c1.b) + noise, 1.);\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
}